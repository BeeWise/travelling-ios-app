//
//  MyProfileInteractorTests.swift
//  Travelling
//
//  Created by Dimitri Strauneanu on 27/09/2020.
//  Copyright (c) 2020 Travelling. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import Travelling
import XCTest

class MyProfileInteractorTests: XCTestCase {
    var sut: MyProfileInteractor!
    var presenterSpy: MyProfilePresentationLogicSpy!
    var workerSpy: MyProfileWorkerSpy!
  
    // MARK: - Test lifecycle
  
    override func setUp() {
        super.setUp()
        self.setupMyProfileInteractor()
    }
  
    override func tearDown() {
        super.tearDown()
    }
  
    // MARK: - Test setup
  
    func setupMyProfileInteractor() {
        self.sut = MyProfileInteractor()
        
        self.presenterSpy = MyProfilePresentationLogicSpy()
        self.sut.presenter = self.presenterSpy
        
        self.workerSpy = MyProfileWorkerSpy(delegate: self.sut)
        self.sut.worker = self.workerSpy
    }
    
    // MARK: - Fetch user tests
    
    func testShouldFetchUserShouldAskThePresenterToPresentUserWhenThereIsUser() {
        self.sut.user = User(id: "userId")
        self.sut.shouldFetchUser()
        XCTAssertTrue(self.presenterSpy.presentUserCalled)
    }
    
    func testShouldFetchUserShouldAskThePresenterToPresentWillFetchUserWhenThereIsNoUser() {
        self.sut.user = nil
        self.sut.shouldFetchUser()
        XCTAssertTrue(self.presenterSpy.presentWillFetchUserCalled)
    }
    
    func testShouldFetchUserShouldAskTheWorkerToFetchUserWhenThereIsNoUser() {
        self.sut.user = nil
        self.sut.shouldFetchUser()
        XCTAssertTrue(self.workerSpy.fetchUserCalled)
    }
    
    func testSuccessDidFetchUserShouldUpdateUser() {
        self.sut.user = nil
        let user = User(id: "userId")
        self.sut.successDidFetchUser(user: user)
        XCTAssertEqual(self.sut.user, user)
    }
    
    func testSuccessDidFetchUserShouldAskThePresenterToPresentUser() {
        self.sut.successDidFetchUser(user: User(id: "userId"))
        XCTAssertTrue(self.presenterSpy.presentUserCalled)
    }
    
    func testSuccessDidFetchUserShouldAskThePresenterToPresentDidFetchUser() {
        self.sut.successDidFetchUser(user: User(id: "userId"))
        XCTAssertTrue(self.presenterSpy.presentDidFetchUserCalled)
    }
    
    func testFailureDidFetchUserShouldAskThePresenterToPresentDidFetchUser() {
        self.sut.failureDidFetchUser(error: OperationError.noDataAvailable)
        XCTAssertTrue(self.presenterSpy.presentDidFetchUserCalled)
    }
  
    // MARK: - Fetch image tests
    
    func testShouldFetchImageShouldAskThePresenterToPresentPlaceholderImageWhenThereIsNoImageAndImageName() {
        let model = MyProfileModels.UserModel()
        model.image = nil
        model.imageName = nil
        self.sut.shouldFetchImage(request: MyProfileModels.ImageFetching.Request(model: model))
        XCTAssertTrue(self.presenterSpy.presentPlaceholderImageCalled)
    }
    
    func testShouldFetchImageShouldAskThePresenterToPresentPlaceholderImageWhenThereIsNoImageAndEmptyImageName() {
        let model = MyProfileModels.UserModel()
        model.image = nil
        model.imageName = ""
        self.sut.shouldFetchImage(request: MyProfileModels.ImageFetching.Request(model: model))
        XCTAssertTrue(self.presenterSpy.presentPlaceholderImageCalled)
    }
    
    func testShouldFetchImageShouldAskThePresenterToPresentWillFetchImageWhenThereIsNoImageAndIsNotLoading() {
        let model = MyProfileModels.UserModel()
        model.image = nil
        model.imageName = "imageName"
        model.isLoadingImage = false
        self.sut.shouldFetchImage(request: MyProfileModels.ImageFetching.Request(model: model))
        XCTAssertTrue(self.presenterSpy.presentWillFetchImageCalled)
    }
    
    func testShouldFetchImageShouldAskTheWorkerToFetchImageWhenThereIsNoImageAndIsNotLoading() {
        let model = MyProfileModels.UserModel()
        model.image = nil
        model.imageName = "imageName"
        model.isLoadingImage = false
        self.sut.shouldFetchImage(request: MyProfileModels.ImageFetching.Request(model: model))
        XCTAssertTrue(self.workerSpy.fetchImageCalled)
    }
    
    func testSuccessDidFetchImageShouldAskThePresenterToPresentImage() {
        self.sut.successDidFetchImage(model: MyProfileModels.UserModel(), image: nil)
        XCTAssertTrue(self.presenterSpy.presentImageCalled)
    }
    
    func testSuccessDidFetchImageShouldAskThePresenterToPresentDidFetchImage() {
        self.sut.successDidFetchImage(model: MyProfileModels.UserModel(), image: nil)
        XCTAssertTrue(self.presenterSpy.presentDidFetchImageCalled)
    }
    
    func testFailureDidFetchImageShouldAskThePresenterToPresentPlaceholderImage() {
        self.sut.failureDidFetchImage(model: MyProfileModels.UserModel(), error: .noDataAvailable)
        XCTAssertTrue(self.presenterSpy.presentPlaceholderImageCalled)
    }
    
    func testFailureDidFetchImageShouldAskThePresenterToPresentDidFetchImage() {
        self.sut.failureDidFetchImage(model: MyProfileModels.UserModel(), error: .noDataAvailable)
        XCTAssertTrue(self.presenterSpy.presentDidFetchImageCalled)
    }
    
    // MARK: - Logout tests
    
    func testShouldSelectItemShouldAskThePresenterToPresentWillLogoutUserForLogoutItemType() {
        self.sut.shouldSelectItem(request: MyProfileModels.ItemSelection.Request(type: .logout))
        XCTAssertTrue(self.presenterSpy.presentWillLogoutUserCalled)
    }
    
    func testShouldSelectItemShouldAskTheWorkerToLogoutUserForLogoutItemType() {
        self.sut.shouldSelectItem(request: MyProfileModels.ItemSelection.Request(type: .logout))
        XCTAssertTrue(self.workerSpy.logoutUserCalled)
    }
    
    func testSuccessDidLogoutUserShouldAskThePresenterToPresentLoggedOutUser() {
        self.sut.successDidLogoutUser(userId: "userId")
        XCTAssertTrue(self.presenterSpy.presentLoggedOutUserCalled)
    }
    
    func testSuccessDidLogoutUserShouldAskThePresenterToPresentDidLogoutUser() {
        self.sut.successDidLogoutUser(userId: "userId")
        XCTAssertTrue(self.presenterSpy.presentDidLogoutUserCalled)
    }
    
    func testFailureDidLogoutUserShouldAskThePresenterToPresentDidLogoutUser() {
        self.sut.failureDidLogoutUser(error: OperationError.noDataAvailable)
        XCTAssertTrue(self.presenterSpy.presentDidLogoutUserCalled)
    }
}
