//
//  LoginInteractorTests.swift
//  Travelling
//
//  Created by Dimitri Strauneanu on 04/10/2020.
//  Copyright (c) 2020 Travelling. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import Travelling
import XCTest

class LoginInteractorTests: XCTestCase {
    var sut: LoginInteractor!
    var presenterSpy: LoginPresentationLogicSpy!
    var workerSpy: LoginWorkerSpy!
  
    // MARK: - Test lifecycle
  
    override func setUp() {
        super.setUp()
        self.setupLoginInteractor()
    }
  
    override func tearDown() {
        super.tearDown()
    }
  
    // MARK: - Test setup
  
    func setupLoginInteractor() {
        self.sut = LoginInteractor()
        
        self.presenterSpy = LoginPresentationLogicSpy()
        self.sut.presenter = self.presenterSpy
        
        self.workerSpy = LoginWorkerSpy(delegate: self.sut)
        self.sut.worker = self.workerSpy
    }
    
    // MARK: - Tests
  
    func testShouldSetupItems() {
        self.sut.shouldSetupItems()
        XCTAssertTrue(self.presenterSpy.presentSetupItemsCalled)
    }
    
    // MARK: - Account tests
    
    func testShouldUpdateAccount() {
        let text = "account"
        self.sut.shouldUpdateItem(request: LoginModels.UpdateItem.Request(text: text, type: LoginModels.ItemType.account))
        XCTAssertEqual(self.sut.loginDetails.account, text)
        XCTAssertTrue(self.presenterSpy.presentUpdateItemCalled)
    }
    
    func testShouldValidateAccountForInvalidAccount() {
        self.sut.loginDetails.account = "test"
        self.sut.shouldValidateItem(request: LoginModels.ValidateItem.Request(type: LoginModels.ItemType.account))
        XCTAssertTrue(self.presenterSpy.presentValidationErrorCalled)
    }
    
    func testShouldValidateAccountForValidAccount() {
        self.sut.loginDetails.account = "username"
        self.sut.shouldValidateItem(request: LoginModels.ValidateItem.Request(type: LoginModels.ItemType.account))
        XCTAssertTrue(self.presenterSpy.presentValidationErrorCalled)
    }
    
    // MARK: - Password tests
    
    func testShouldUpdatePassword() {
        let text = "password"
        self.sut.shouldUpdateItem(request: LoginModels.UpdateItem.Request(text: text, type: LoginModels.ItemType.password))
        XCTAssertEqual(self.sut.loginDetails.password, text)
        XCTAssertTrue(self.presenterSpy.presentUpdateItemCalled)
    }
    
    func testShouldValidatePasswordForInvalidPassword() {
        self.sut.loginDetails.password = "a"
        self.sut.shouldValidateItem(request: LoginModels.ValidateItem.Request(type: LoginModels.ItemType.password))
        XCTAssertTrue(self.presenterSpy.presentValidationErrorCalled)
    }
    
    func testShouldValidatePasswordForValidPassword() {
        self.sut.loginDetails.password = "password"
        self.sut.shouldValidateItem(request: LoginModels.ValidateItem.Request(type: LoginModels.ItemType.password))
        XCTAssertTrue(self.presenterSpy.presentValidationErrorCalled)
    }
    
    // MARK: - Enabling/Disabling items
    
    func testShouldUpdateItemWhenAllItemsAreValid() {
        self.sut.loginDetails.account = "username"
        self.sut.loginDetails.password = "password"
        self.sut.shouldUpdateItem(request: LoginModels.UpdateItem.Request(text: "valid.email@email.com", type: LoginModels.ItemType.account))
        
        XCTAssertTrue(self.presenterSpy.presentEnableItemCalled)
    }
    
    func testShouldUpdateItemWhenOnlyWhenAccountIsInvalid() {
        self.sut.loginDetails.account = "username"
        self.sut.loginDetails.password = "password"
        self.sut.shouldUpdateItem(request: LoginModels.UpdateItem.Request(text: "email", type: LoginModels.ItemType.account))
        
        XCTAssertTrue(self.presenterSpy.presentDisableItemCalled)
    }
    
    func testShouldUpdateItemWhenOnlyWhenPasswordIsInvalid() {
        self.sut.loginDetails.account = "account"
        self.sut.shouldUpdateItem(request: LoginModels.UpdateItem.Request(text: "valid.email@email.com", type: LoginModels.ItemType.account))
        
        XCTAssertTrue(self.presenterSpy.presentDisableItemCalled)
    }
    
    // MARK: - Logging user
    
    func testShouldSelectItemShouldAskThePresenterToPresentDisableUserInteractionForLoginItemType() {
        self.sut.shouldSelectItem(request: LoginModels.ItemSelection.Request(type: .login))
        XCTAssertTrue(self.presenterSpy.presentDisableUserInteractionCalled)
    }
    
    func testShouldSelectItemShouldAskThePresenterToPresentDisableItemForLoginItemType() {
        self.sut.shouldSelectItem(request: LoginModels.ItemSelection.Request(type: .login))
        XCTAssertTrue(self.presenterSpy.presentDisableItemCalled)
    }
    
    func testShouldSelectItemShouldAskThePresenterToPresentLoadingItemForLoginItemType() {
        self.sut.shouldSelectItem(request: LoginModels.ItemSelection.Request(type: .login))
        XCTAssertTrue(self.presenterSpy.presentLoadingItemCalled)
    }
    
    func testShouldSelectItemShouldAskTheWorkerToLoginUserForLoginItemType() {
        self.sut.shouldSelectItem(request: LoginModels.ItemSelection.Request(type: .login))
        XCTAssertTrue(self.workerSpy.loginUserCalled)
    }
    
    func testSuccessDidLoginUserShouldAskThePresenterToPresentNotLoadingItem() {
        self.sut.successDidLoginUser(user: User(id: "id"))
        XCTAssertTrue(self.presenterSpy.presentNotLoadingItemCalled)
    }
    
    func testSuccessDidLoginUserShouldAskThePresenterToPresentEnableItem() {
        self.sut.successDidLoginUser(user: User(id: "id"))
        XCTAssertTrue(self.presenterSpy.presentEnableItemCalled)
    }
    
    func testSuccessDidLoginUserShouldAskThePresenterToPresentEnableUserInteraction() {
        self.sut.successDidLoginUser(user: User(id: "id"))
        XCTAssertTrue(self.presenterSpy.presentEnableUserInteractionCalled)
    }
    
    func testSuccessDidLoginUserShouldAskThePresenterToPresentUserDetails() {
        self.sut.successDidLoginUser(user: User(id: "id"))
        XCTAssertTrue(self.presenterSpy.presentUserDetailsCalled)
    }
    
    func testFailureDidLoginUserShouldAskThePresenterToPresentNotLoadingItem() {
        self.sut.failureDidLoginUser(details: LoginModels.LoginDetails(), error: OperationError.noDataAvailable)
        XCTAssertTrue(self.presenterSpy.presentNotLoadingItemCalled)
    }
    
    func testFailureDidLoginUserShouldAskThePresenterToPresentEnableItem() {
        self.sut.failureDidLoginUser(details: LoginModels.LoginDetails(), error: OperationError.noDataAvailable)
        XCTAssertTrue(self.presenterSpy.presentEnableItemCalled)
    }
    
    func testFailureDidLoginUserShouldAskThePresenterToPresentEnableUserInteraction() {
        self.sut.failureDidLoginUser(details: LoginModels.LoginDetails(), error: OperationError.noDataAvailable)
        XCTAssertTrue(self.presenterSpy.presentEnableUserInteractionCalled)
    }
    
    func testFailureDidLoginUserShouldAskThePresenterToPresentErrorAlert() {
        self.sut.failureDidLoginUser(details: LoginModels.LoginDetails(), error: OperationError.noDataAvailable)
        XCTAssertTrue(self.presenterSpy.presentErrorAlertCalled)
    }
    
    // MARK: - Navigation tests
    
    func testShouldSelectItemShouldAskThePresenterToPresentNavigateToForgotPasswordForForgotPasswordItemType() {
        self.sut.shouldSelectItem(request: LoginModels.ItemSelection.Request(type: .forgotPassword))
        XCTAssertTrue(self.presenterSpy.presentNavigateToForgotPasswordCalled)
    }
}
