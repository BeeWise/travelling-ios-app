//
//  LoginPresenterTests.swift
//  Travelling
//
//  Created by Dimitri Strauneanu on 04/10/2020.
//  Copyright (c) 2020 Travelling. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import Travelling
import XCTest

class LoginPresenterTests: XCTestCase {
    var sut: LoginPresenter!
    var displayerSpy: LoginDisplayLogicSpy!
    
    // MARK: - Test lifecycle
    
    override func setUp() {
        super.setUp()
        self.setupLoginPresenter()
    }
    
    override func tearDown() {
        super.tearDown()
    }
    
    // MARK: - Test setup
    
    func setupLoginPresenter() {
        self.sut = LoginPresenter()
        
        self.displayerSpy = LoginDisplayLogicSpy()
        self.sut.displayer = self.displayerSpy
    }
    
    // MARK: - Tests
    
    func testPresentSetupItems() {
        self.sut.presentSetupItems()
        XCTAssertTrue(self.displayerSpy.displaySetupItemsCalled)
    }
    
    func testPresentUpdateItem() {
        self.sut.presentUpdateItem(response: LoginModels.UpdateItem.Response(text: "email", type: LoginModels.ItemType.account))
        XCTAssertTrue(self.displayerSpy.displayUpdateItemCalled)
    }
    
    func testPresentValidationError() {
        self.sut.presentValidationError(response: LoginModels.ValidateItem.Response(type: LoginModels.ItemType.account, displayError: true))
        XCTAssertTrue(self.displayerSpy.displayValidationErrorCalled)
    }
    
    func testPresentEnableItem() {
        self.sut.presentEnableItem(response: LoginModels.EnableItem.Response(type: LoginModels.ItemType.account))
        XCTAssertTrue(self.displayerSpy.displayEnableItemCalled)
    }
    
    func testPresentDisableItem() {
        self.sut.presentDisableItem(response: LoginModels.EnableItem.Response(type: LoginModels.ItemType.account))
        XCTAssertTrue(self.displayerSpy.displayDisableItemCalled)
    }
    
    func testPresentLoadingItem() {
        self.sut.presentLoadingItem(response: LoginModels.LoadingItem.Response(type: LoginModels.ItemType.login))
        XCTAssertTrue(self.displayerSpy.displayLoadingItemCalled)
    }
    
    func testPresentNotLoadingItem() {
        self.sut.presentNotLoadingItem(response: LoginModels.LoadingItem.Response(type: LoginModels.ItemType.login))
        XCTAssertTrue(self.displayerSpy.displayNotLoadingItemCalled)
    }
    
    func testPresentEnableUserInteraction() {
        self.sut.presentEnableUserInteraction()
        XCTAssertTrue(self.displayerSpy.displayEnableUserInteractionCalled)
    }
    
    func testPresentDisableUserInteraction() {
        self.sut.presentDisableUserInteraction()
        XCTAssertTrue(self.displayerSpy.displayDisableUserInteractionCalled)
    }
    
    func testPresentErrorAlert() {
        self.sut.presentErrorAlert(response: LoginModels.LoginError.Response(error: OperationError.noDataAvailable))
        XCTAssertTrue(self.displayerSpy.displayErrorAlertCalled)
    }
    
    func testPresentNavigateToForgotPassword()  {
        self.sut.presentNavigateToForgotPassword()
        XCTAssertTrue(self.displayerSpy.displayNavigateToForgotPasswordCalled)
    }
    
    func testPresentUserDetails() {
        self.sut.presentUserDetails(response: LoginModels.UserDetails.Response(user: User(id: "userId")))
        XCTAssertTrue(self.displayerSpy.displayUserDetailsCalled)
    }
}
