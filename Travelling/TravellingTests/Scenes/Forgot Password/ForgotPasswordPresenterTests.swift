//
//  ForgotPasswordPresenterTests.swift
//  Travelling
//
//  Created by Dimitri Strauneanu on 05/10/2020.
//  Copyright (c) 2020 Travelling. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import Travelling
import XCTest

class ForgotPasswordPresenterTests: XCTestCase {
    var sut: ForgotPasswordPresenter!
    var displayerSpy: ForgotPasswordDisplayLogicSpy!
    
    // MARK: - Test lifecycle
    
    override func setUp() {
        super.setUp()
        self.setupForgotPasswordPresenter()
    }
    
    override func tearDown() {
        super.tearDown()
    }
    
    // MARK: - Test setup
    
    func setupForgotPasswordPresenter() {
        self.sut = ForgotPasswordPresenter()
        
        self.displayerSpy = ForgotPasswordDisplayLogicSpy()
        self.sut.displayer = self.displayerSpy
    }
    
    // MARK: - Tests
    
    func testPresentSetupItems() {
        self.sut.presentSetupItems()
        XCTAssertTrue(self.displayerSpy.displaySetupItemsCalled)
    }
    
    func testPresentUpdateItem() {
        self.sut.presentUpdateItem(response: ForgotPasswordModels.UpdateItem.Response(text: "email", type: ForgotPasswordModels.ItemType.email))
        XCTAssertTrue(self.displayerSpy.displayUpdateItemCalled)
    }
    
    func testPresentValidationError() {
        self.sut.presentValidationError(response: ForgotPasswordModels.ValidateItem.Response(type: ForgotPasswordModels.ItemType.email, displayError: true))
        XCTAssertTrue(self.displayerSpy.displayValidationErrorCalled)
    }
    
    func testPresentEnableItem() {
        self.sut.presentEnableItem(response: ForgotPasswordModels.EnableItem.Response(type: ForgotPasswordModels.ItemType.email))
        XCTAssertTrue(self.displayerSpy.displayEnableItemCalled)
    }
    
    func testPresentDisableItem() {
        self.sut.presentDisableItem(response: ForgotPasswordModels.EnableItem.Response(type: ForgotPasswordModels.ItemType.email))
        XCTAssertTrue(self.displayerSpy.displayDisableItemCalled)
    }
    
    func testPresentLoadingItem() {
        self.sut.presentLoadingItem(response: ForgotPasswordModels.LoadingItem.Response(type: ForgotPasswordModels.ItemType.resetLink))
        XCTAssertTrue(self.displayerSpy.displayLoadingItemCalled)
    }
    
    func testPresentNotLoadingItem() {
        self.sut.presentNotLoadingItem(response: ForgotPasswordModels.LoadingItem.Response(type: ForgotPasswordModels.ItemType.resetLink))
        XCTAssertTrue(self.displayerSpy.displayNotLoadingItemCalled)
    }
    
    func testPresentEnableUserInteraction() {
        self.sut.presentEnableUserInteraction()
        XCTAssertTrue(self.displayerSpy.displayEnableUserInteractionCalled)
    }
    
    func testPresentDisableUserInteraction() {
        self.sut.presentDisableUserInteraction()
        XCTAssertTrue(self.displayerSpy.displayDisableUserInteractionCalled)
    }
    
    func testPresentConfirmationAlert() {
        self.sut.presentConfirmationAlert(response: ForgotPasswordModels.Confirmation.Response(email: "email@mail.com"))
        XCTAssertTrue(self.displayerSpy.displayConfirmationAlertCalled)
    }
    
    func testPresentConfirmationEmailAlert() {
        self.sut.presentConfirmationEmailAlert(response: ForgotPasswordModels.ConfirmationEmail.Response(email: "email@mail.com"))
        XCTAssertTrue(self.displayerSpy.displayConfirmationEmailAlertCalled)
    }
    
    func testPresentErrorAlert() {
        self.sut.presentErrorAlert(response: ForgotPasswordModels.ForgotPasswordError.Response(error: OperationError.noDataAvailable))
        XCTAssertTrue(self.displayerSpy.displayErrorAlertCalled)
    }
    
    func testPresentOpenMailApplication() {
        self.sut.presentOpenMailApplication(response: ForgotPasswordModels.OpenApplication.Response(url: URL(string: "message://")!))
        XCTAssertTrue(self.displayerSpy.displayOpenMailApplicationCalled)
    }
}
