//
//  PlaceCommentsWorkerTests.swift
//  Travelling
//
//  Created by Dimitri Strauneanu on 12/10/2020.
//  Copyright (c) 2020 Travelling. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import Travelling
import XCTest

class PlaceCommentsWorkerTests: XCTestCase {
    var sut: PlaceCommentsWorker!
    var delegateSpy: PlaceCommentsWorkerDelegateSpy!
    
    // MARK: - Test lifecycle
    
    override func setUp() {
        super.setUp()
        self.setupPlaceCommentsWorker()
    }
    
    override func tearDown() {
        super.tearDown()
    }
    
    // MARK: - Test setup
    
    func setupPlaceCommentsWorker() {
        self.delegateSpy = PlaceCommentsWorkerDelegateSpy()
        self.sut = PlaceCommentsWorker(delegate: self.delegateSpy)
    }
    
    // MARK: - Tests
    
    func testFetchItemsShouldAskThePlacesTaskToFetchPlaceComments() {
        let taskSpy = PlacesTaskSpy()
        self.sut.placesTask = taskSpy
        self.sut.fetchItems(placeId: "placeId", page: 0, limit: 30)
        XCTAssertTrue(taskSpy.fetchPlaceCommentsCalled)
    }
    
    func testFetchItemsShouldAskTheDelegateToSendCommentsForSuccessCase() {
        let taskSpy = PlacesTaskSpy()
        taskSpy.shouldFailFetchPlaceComments = false
        self.sut.placesTask = taskSpy
        self.sut.fetchItems(placeId: "placeId", page: 0, limit: 30)
        XCTAssertTrue(self.delegateSpy.successDidFetchItemsCalled)
    }
    
    func testFetchItemsShouldAskTheDelegateToSendErrorForFailureCase() {
        let taskSpy = PlacesTaskSpy()
        taskSpy.shouldFailFetchPlaceComments = true
        self.sut.placesTask = taskSpy
        self.sut.fetchItems(placeId: "placeId", page: 0, limit: 30)
        XCTAssertTrue(self.delegateSpy.failureDidFetchItemsCalled)
    }
    
    func testFetchImage() {
        let taskSpy = ImageTaskSpy()
        self.sut.imageTask = taskSpy
        self.sut.fetchImage(item: PlaceCommentsModels.DisplayedItem(id: "id"))
        XCTAssertTrue(taskSpy.fetchImageCalled)
    }
    
    func testFetchImageShouldAskTheDelegateToSendImageForSuccessCase() {
        let taskSpy = ImageTaskSpy()
        taskSpy.shouldFailFetchImage = false
        self.sut.imageTask = taskSpy
        self.sut.fetchImage(item: PlaceCommentsModels.DisplayedItem(id: "id"))
        XCTAssertTrue(self.delegateSpy.successDidFetchImageCalled)
    }
    
    func testFetchImageShouldAskTheDelegateToSendErrorForFailureCase() {
        let taskSpy = ImageTaskSpy()
        taskSpy.shouldFailFetchImage = true
        self.sut.imageTask = taskSpy
        self.sut.fetchImage(item: PlaceCommentsModels.DisplayedItem(id: "id"))
        XCTAssertTrue(self.delegateSpy.failureDidFetchImageCalled)
    }
}
