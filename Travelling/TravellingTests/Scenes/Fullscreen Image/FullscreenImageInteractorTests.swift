//
//  FullscreenImageInteractorTests.swift
//  Travelling
//
//  Created by Dimitri Strauneanu on 04/10/2020.
//  Copyright (c) 2020 Travelling. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import Travelling
import XCTest

class FullscreenImageInteractorTests: XCTestCase {
    var sut: FullscreenImageInteractor!
    var presenterSpy: FullscreenImagePresentationLogicSpy!
    var workerSpy: FullscreenImageWorkerSpy!
    
    // MARK: - Test lifecycle
    
    override func setUp() {
        super.setUp()
        self.setupFullscreenImageInteractor()
    }
    
    override func tearDown() {
        super.tearDown()
    }
    
    // MARK: - Test setup
    
    func setupFullscreenImageInteractor() {
        self.sut = FullscreenImageInteractor()
        
        self.presenterSpy = FullscreenImagePresentationLogicSpy()
        self.sut.presenter = self.presenterSpy
        
        self.workerSpy = FullscreenImageWorkerSpy(delegate: self.sut)
        self.sut.worker = self.workerSpy
    }
    
    // MARK: - Tests
    
    func testShouldSetImageShouldUpdateImageName() {
        self.sut.imageName = nil
        let imageName = "imageName"
        self.sut.shouldSetImage(request: FullscreenImageModels.ImageSetup.Request(name: imageName))
        XCTAssertEqual(self.sut.imageName, imageName)
    }
    
    func testShouldFetchImageShouldAskThePresenterToPresentPlaceholderImageWhenImageNameIsNil() {
        self.sut.imageName = nil
        self.sut.shouldFetchImage()
        XCTAssertTrue(self.presenterSpy.presentPlaceholderImageCalled)
    }
    
    func testShouldFetchImageShouldAskThePresenterToPresentPlaceholderImageWhenImageNameIsEmpty() {
        self.sut.imageName = ""
        self.sut.shouldFetchImage()
        XCTAssertTrue(self.presenterSpy.presentPlaceholderImageCalled)
    }
    
    func testShouldFetchImageShouldUpdateIsFetchingImageWhenThereIsImageNameAndIsNotFetchingImage() {
        self.sut.imageName = "imageName"
        self.sut.isFetchingImage = false
        self.sut.shouldFetchImage()
        XCTAssertTrue(self.sut.isFetchingImage)
    }
    
    func testShouldFetchImageShouldAskThePresenterToPresentWillFetchImageWhenThereIsImageNameAndIsNotFetchingImage() {
        self.sut.imageName = "imageName"
        self.sut.isFetchingImage = false
        self.sut.shouldFetchImage()
        XCTAssertTrue(self.presenterSpy.presentWillFetchImageCalled)
    }
    
    func testShouldFetchImageShouldAskTheWorkerToFetchImageWhenThereIsImageNameAndIsNotFetchingImage() {
        self.sut.imageName = "imageName"
        self.sut.isFetchingImage = false
        self.sut.shouldFetchImage()
        XCTAssertTrue(self.workerSpy.fetchImageCalled)
    }
    
    func testSuccessDidFetchImageShouldAskThePresenterToPresentImage() {
        self.sut.successDidFetchImage(image: nil)
        XCTAssertTrue(self.presenterSpy.presentImageCalled)
    }
    
    func testSuccessDidFetchImageShouldAskThePresenterToPresentDidFetchImage() {
        self.sut.successDidFetchImage(image: nil)
        XCTAssertTrue(self.presenterSpy.presentDidFetchImageCalled)
    }
    
    func testSuccessDidFetchImageShouldUpdateIsFetchingImage() {
        self.sut.isFetchingImage = true
        self.sut.successDidFetchImage(image: nil)
        XCTAssertFalse(self.sut.isFetchingImage)
    }
    
    func testFailureDidFetchImageShouldAskThePresenterToPresentPlaceholderImage() {
        self.sut.failureDidFetchImage(error: .noDataAvailable)
        XCTAssertTrue(self.presenterSpy.presentPlaceholderImageCalled)
    }
    
    func testFailureDidFetchImageShouldAskThePresenterToPresentDidFetchImage() {
        self.sut.failureDidFetchImage(error: .noDataAvailable)
        XCTAssertTrue(self.presenterSpy.presentDidFetchImageCalled)
    }
    
    func testFailureDidFetchImageShouldUpdateIsFetchingImage() {
        self.sut.isFetchingImage = true
        self.sut.failureDidFetchImage(error: .noDataAvailable)
        XCTAssertFalse(self.sut.isFetchingImage)
    }
}
