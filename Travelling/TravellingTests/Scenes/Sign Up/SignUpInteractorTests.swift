//
//  SignUpInteractorTests.swift
//  Travelling
//
//  Created by Dimitri Strauneanu on 06/10/2020.
//  Copyright (c) 2020 Travelling. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import Travelling
import XCTest

class SignUpInteractorTests: XCTestCase {
    var sut: SignUpInteractor!
    var presenterSpy: SignUpPresentationLogicSpy!
    var workerSpy: SignUpWorkerSpy!
    var photoLibraryHandlerSpy: PhotoLibraryHandlerSpy!
  
    // MARK: - Test lifecycle
  
    override func setUp() {
        super.setUp()
        self.setupSignUpInteractor()
    }
  
    override func tearDown() {
        super.tearDown()
    }
  
    // MARK: - Test setup
  
    func setupSignUpInteractor() {
        self.sut = SignUpInteractor()
        
        self.presenterSpy = SignUpPresentationLogicSpy()
        self.sut.presenter = self.presenterSpy
        
        self.workerSpy = SignUpWorkerSpy(delegate: self.sut)
        self.sut.worker = self.workerSpy
        
        self.photoLibraryHandlerSpy = PhotoLibraryHandlerSpy()
        self.sut.photoLibraryHandler = self.photoLibraryHandlerSpy
    }
    
    // MARK: - Tests
  
    func testShouldSetupItems() {
        self.sut.shouldSetupItems()
        XCTAssertTrue(self.presenterSpy.presentSetupItemsCalled)
    }
    
    // MARK: - Email tests
    
    func testShouldUpdateEmail() {
        let text = "email"
        self.sut.shouldUpdateItem(request: SignUpModels.UpdateItem.Request(text: text, type: SignUpModels.ItemType.email))
        XCTAssertEqual(self.sut.userDetails.email, text)
        XCTAssertTrue(self.presenterSpy.presentUpdateItemCalled)
    }
    
    func testShouldValidateEmailForInvalidEmail() {
        self.sut.userDetails.email = "invalid.email"
        self.sut.shouldValidateItem(request: SignUpModels.ValidateItem.Request(type: SignUpModels.ItemType.email))
        XCTAssertTrue(self.presenterSpy.presentValidationErrorCalled)
    }
    
    func testShouldValidateEmailForValidEmail() {
        self.sut.userDetails.email = "valid.email@email.com"
        self.sut.shouldValidateItem(request: SignUpModels.ValidateItem.Request(type: SignUpModels.ItemType.email))
        XCTAssertTrue(self.presenterSpy.presentValidationErrorCalled)
    }
    
    // MARK: - Username tests
    
    func testShouldUpdateUsername() {
        let text = "username"
        self.sut.shouldUpdateItem(request: SignUpModels.UpdateItem.Request(text: text, type: SignUpModels.ItemType.username))
        XCTAssertEqual(self.sut.userDetails.username, text)
        XCTAssertTrue(self.presenterSpy.presentUpdateItemCalled)
    }
    
    func testShouldValidateUsernameForInvalidUsername() {
        self.sut.userDetails.username = "a"
        self.sut.shouldValidateItem(request: SignUpModels.ValidateItem.Request(type: SignUpModels.ItemType.username))
        XCTAssertTrue(self.presenterSpy.presentValidationErrorCalled)
    }
    
    func testShouldValidateUsernameForIncorrectUsername() {
        self.sut.userDetails.username = "username#$%"
        self.sut.shouldValidateItem(request: SignUpModels.ValidateItem.Request(type: SignUpModels.ItemType.username))
        XCTAssertTrue(self.presenterSpy.presentValidationErrorCalled)
    }
    
    func testShouldValidateUsernameForValidUsername() {
        self.sut.userDetails.username = "user1_.-"
        self.sut.shouldValidateItem(request: SignUpModels.ValidateItem.Request(type: SignUpModels.ItemType.username))
        XCTAssertTrue(self.presenterSpy.presentValidationErrorCalled)
    }
    
    // MARK: - Password tests
    
    func testShouldUpdatePassword() {
        let text = "password"
        self.sut.shouldUpdateItem(request: SignUpModels.UpdateItem.Request(text: text, type: SignUpModels.ItemType.password))
        XCTAssertEqual(self.sut.userDetails.password, text)
        XCTAssertTrue(self.presenterSpy.presentUpdateItemCalled)
    }
    
    func testShouldValidatePasswordForInvalidPassword() {
        self.sut.userDetails.password = "a"
        self.sut.shouldValidateItem(request: SignUpModels.ValidateItem.Request(type: SignUpModels.ItemType.password))
        XCTAssertTrue(self.presenterSpy.presentValidationErrorCalled)
    }
    
    func testShouldValidatePasswordForValidPassword() {
        self.sut.userDetails.password = "password"
        self.sut.shouldValidateItem(request: SignUpModels.ValidateItem.Request(type: SignUpModels.ItemType.password))
        XCTAssertTrue(self.presenterSpy.presentValidationErrorCalled)
    }
    
    // MARK: - First name tests
    
    func testShouldUpdateFirstName() {
        let text = "first name"
        self.sut.shouldUpdateItem(request: SignUpModels.UpdateItem.Request(text: text, type: SignUpModels.ItemType.firstName))
        XCTAssertEqual(self.sut.userDetails.firstName, text)
        XCTAssertTrue(self.presenterSpy.presentUpdateItemCalled)
    }
    
    func testShouldValidateFirstNameForInvalidFirstName() {
        self.sut.userDetails.firstName = ""
        self.sut.shouldValidateItem(request: SignUpModels.ValidateItem.Request(type: SignUpModels.ItemType.firstName))
        XCTAssertTrue(self.presenterSpy.presentValidationErrorCalled)
    }
    
    func testShouldValidateFirstNameForValidFirstName() {
        self.sut.userDetails.firstName = "first name"
        self.sut.shouldValidateItem(request: SignUpModels.ValidateItem.Request(type: SignUpModels.ItemType.firstName))
        XCTAssertTrue(self.presenterSpy.presentValidationErrorCalled)
    }
    
    // MARK: - Last name
    
    func testShouldUpdateLastName() {
        let text = "last name"
        self.sut.shouldUpdateItem(request: SignUpModels.UpdateItem.Request(text: text, type: SignUpModels.ItemType.lastName))
        XCTAssertEqual(self.sut.userDetails.lastName, text)
        XCTAssertTrue(self.presenterSpy.presentUpdateItemCalled)
    }
    
    func testShouldValidateLastNameForInvalidLastName() {
        self.sut.userDetails.lastName = ""
        self.sut.shouldValidateItem(request: SignUpModels.ValidateItem.Request(type: SignUpModels.ItemType.lastName))
        XCTAssertTrue(self.presenterSpy.presentValidationErrorCalled)
    }
    
    func testShouldValidateLastNameForValidLastName() {
        self.sut.userDetails.lastName = "last name"
        self.sut.shouldValidateItem(request: SignUpModels.ValidateItem.Request(type: SignUpModels.ItemType.lastName))
        XCTAssertTrue(self.presenterSpy.presentValidationErrorCalled)
    }
    
    // MARK: - Description
    
    func testShouldUpdateDescription() {
        let text = "description"
        self.sut.shouldUpdateItem(request: SignUpModels.UpdateItem.Request(text: text, type: SignUpModels.ItemType.description))
        XCTAssertEqual(self.sut.userDetails.description, text)
        XCTAssertTrue(self.presenterSpy.presentUpdateItemCalled)
    }
    
    // MARK: - Activate textfield
    
    func testShouldActivateTextField() {
        self.sut.shouldActivateTextField(request: SignUpModels.ActivateTextField.Request(type: .email))
        XCTAssertTrue(self.presenterSpy.presentActivateTextFieldCalled)
    }
    
    // MARK: - Enabling/Disabling items
    
    func testShouldUpdateItemWhenAllItemsAreValid() {
        self.sut.userDetails.username = "username"
        self.sut.userDetails.password = "password"
        self.sut.userDetails.firstName = "first name"
        self.sut.userDetails.lastName = "last name"
        self.sut.shouldUpdateItem(request: SignUpModels.UpdateItem.Request(text: "valid.email@email.com", type: SignUpModels.ItemType.email))
        XCTAssertTrue(self.presenterSpy.presentEnableItemCalled)
    }
    
    func testShouldUpdateItemWhenOnlyWhenEmailIsInvalid() {
        self.sut.userDetails.username = "username"
        self.sut.userDetails.password = "password"
        self.sut.userDetails.firstName = "first name"
        self.sut.userDetails.lastName = "last name"
        self.sut.shouldUpdateItem(request: SignUpModels.UpdateItem.Request(text: "email", type: SignUpModels.ItemType.email))
        XCTAssertTrue(self.presenterSpy.presentDisableItemCalled)
    }
    
    func testShouldUpdateItemWhenOnlyWhenUsernameIsInvalid() {
        self.sut.userDetails.password = "password"
        self.sut.userDetails.firstName = "first name"
        self.sut.userDetails.lastName = "last name"
        self.sut.shouldUpdateItem(request: SignUpModels.UpdateItem.Request(text: "valid.email@email.com", type: SignUpModels.ItemType.email))
        XCTAssertTrue(self.presenterSpy.presentDisableItemCalled)
    }
    
    func testShouldUpdateItemWhenOnlyWhenPasswordIsInvalid() {
        self.sut.userDetails.username = "username"
        self.sut.userDetails.firstName = "first name"
        self.sut.userDetails.lastName = "last name"
        self.sut.shouldUpdateItem(request: SignUpModels.UpdateItem.Request(text: "valid.email@email.com", type: SignUpModels.ItemType.email))
        XCTAssertTrue(self.presenterSpy.presentDisableItemCalled)
    }
    
    func testShouldUpdateItemWhenOnlyWhenFirstNameIsInvalid() {
        self.sut.userDetails.username = "username"
        self.sut.userDetails.password = "password"
        self.sut.userDetails.lastName = "last name"
        self.sut.shouldUpdateItem(request: SignUpModels.UpdateItem.Request(text: "valid.email@email.com", type: SignUpModels.ItemType.email))
        XCTAssertTrue(self.presenterSpy.presentDisableItemCalled)
    }
    
    func testShouldUpdateItemWhenOnlyWhenLastNameIsInvalid() {
        self.sut.userDetails.username = "username"
        self.sut.userDetails.password = "password"
        self.sut.userDetails.firstName = "first name"
        self.sut.shouldUpdateItem(request: SignUpModels.UpdateItem.Request(text: "valid.email@email.com", type: SignUpModels.ItemType.email))
        XCTAssertTrue(self.presenterSpy.presentDisableItemCalled)
    }
    
    // MARK: - Profile photo selection
    
    func testShouldSelectItemWhenThereIsNoPhotoSelectedAndNoCameraAvailableForPhotoItemType() {
        self.photoLibraryHandlerSpy.hasPhotoLibrary = true
        self.photoLibraryHandlerSpy.hasCamera = false
        
        self.sut.userDetails.photo = nil
        
        self.sut.shouldSelectItem(request: SignUpModels.ItemSelection.Request(itemType: .photo, sourceView: UIView()))
        XCTAssertTrue(self.presenterSpy.presentPhotoLibraryAlertCalled)
    }
    
    func testShouldSelectItemWhenThereIsNoPhotoSelectedAndCameraIsAvailableForPhotoItemType() {
        self.photoLibraryHandlerSpy.hasPhotoLibrary = true
        self.photoLibraryHandlerSpy.hasCamera = true
        
        self.sut.userDetails.photo = nil
        
        self.sut.shouldSelectItem(request: SignUpModels.ItemSelection.Request(itemType: .photo, sourceView: UIView()))
        XCTAssertTrue(self.presenterSpy.presentPhotoLibraryCameraAlertCalled)
    }
    
    func testShouldSelectItemWhenThereIsPhotoSelectedAndNoCameraAvailableForPhotoItemType() {
        self.photoLibraryHandlerSpy.hasPhotoLibrary = true
        self.photoLibraryHandlerSpy.hasCamera = false
        
        self.sut.userDetails.photo = UIImage()
        
        self.sut.shouldSelectItem(request: SignUpModels.ItemSelection.Request(itemType: .photo, sourceView: UIView()))
        XCTAssertTrue(self.presenterSpy.presentPhotoLibraryRemovePhotoAlertCalled)
    }
    
    func testShouldSelectItemWhenThereIsPhotoSelectedAndCameraAvailableForPhotoItemType() {
        self.photoLibraryHandlerSpy.hasPhotoLibrary = true
        self.photoLibraryHandlerSpy.hasCamera = true
        
        self.sut.userDetails.photo = UIImage()
        
        self.sut.shouldSelectItem(request: SignUpModels.ItemSelection.Request(itemType: .photo, sourceView: UIView()))
        XCTAssertTrue(self.presenterSpy.presentPhotoLibraryCameraRemovePhotoAlertCalled)
    }
    
    func testShouldSelectItemWhenThereIsNoPhotoSelectedAndNoPhotoLibraryAvailableForPhotoItemType() {
        self.photoLibraryHandlerSpy.hasPhotoLibrary = false
        self.photoLibraryHandlerSpy.hasCamera = true
        
        self.sut.userDetails.photo = nil
        
        self.sut.shouldSelectItem(request: SignUpModels.ItemSelection.Request(itemType: .photo, sourceView: UIView()))
        XCTAssertTrue(self.presenterSpy.presentCameraAlertCalled)
    }
    
    func testShouldSelectItemWhenThereIsPhotoSelectedAndNoPhotoLibraryAvailableForPhotoItemType() {
        self.photoLibraryHandlerSpy.hasPhotoLibrary = false
        self.photoLibraryHandlerSpy.hasCamera = true
        
        self.sut.userDetails.photo = UIImage()
        
        self.sut.shouldSelectItem(request: SignUpModels.ItemSelection.Request(itemType: .photo, sourceView: UIView()))
        XCTAssertTrue(self.presenterSpy.presentCameraRemovePhotoAlertCalled)
    }
    
    func testShouldUpdateImageItemForPhoto() {
        self.sut.userDetails.photo = nil
        
        let image = UIImage()
        self.sut.shouldUpdateImageItem(request: SignUpModels.UpdateImageItem.Request(image: image, type: SignUpModels.ItemType.photo))
        XCTAssertTrue(self.presenterSpy.presentUpdateImageItemCalled)
        XCTAssertEqual(self.sut.userDetails.photo, image)
    }
    
    func testShouldUpdateImageItemForPhotoShouldAskThePresenterToPresentUpdatePlaceholderImageItemWhenThereIsNoImage() {
        self.sut.userDetails.photo = UIImage()
        
        let image: UIImage? = nil
        self.sut.shouldUpdateImageItem(request: SignUpModels.UpdateImageItem.Request(image: image, type: SignUpModels.ItemType.photo))
        XCTAssertTrue(self.presenterSpy.presentUpdatePlaceholderImageItemCalled)
        XCTAssertEqual(self.sut.userDetails.photo, image)
    }
    
    // MARK: - Navigation
    
    func testShouldNavigateToPhotoLibrary() {
        self.sut.shouldNavigateToPhotoLibrary(request: SignUpModels.SourceView.Request(sourceView: UIView()))
        XCTAssertTrue(self.presenterSpy.presentNavigateToPhotoLibraryCalled)
    }
    
    func testShouldNavigateToCamera() {
        self.sut.shouldNavigateToCamera(request: SignUpModels.SourceView.Request(sourceView: UIView()))
        XCTAssertTrue(self.presenterSpy.presentNavigateToCameraCalled)
    }
    
    // MARK: - Signing user up
    
    func testShouldSelectItemShouldAskThePresenterToPresentDisableUserInteractionForSignUpItemType() {
        self.sut.shouldSelectItem(request: SignUpModels.ItemSelection.Request(itemType: .signUp, sourceView: UIView()))
        XCTAssertTrue(self.presenterSpy.presentDisableUserInteractionCalled)
    }
    
    func testShouldSelectItemShouldAskThePresenterToPresentDisableItemForSignUpItemType() {
        self.sut.shouldSelectItem(request: SignUpModels.ItemSelection.Request(itemType: .signUp, sourceView: UIView()))
        XCTAssertTrue(self.presenterSpy.presentDisableItemCalled)
    }
    
    func testShouldSelectItemShouldAskThePresenterToPresentLoadingItemForSignUpItemType() {
        self.sut.shouldSelectItem(request: SignUpModels.ItemSelection.Request(itemType: .signUp, sourceView: UIView()))
        XCTAssertTrue(self.presenterSpy.presentLoadingItemCalled)
    }
    
    func testShouldSelectItemShouldAskTheWorkerToSignUpUserForSignUpItemType() {
        self.sut.shouldSelectItem(request: SignUpModels.ItemSelection.Request(itemType: .signUp, sourceView: UIView()))
        XCTAssertTrue(self.workerSpy.signUpUserCalled)
    }
    
    func testSuccessDidSignUpUserShouldAskThePresenterToPresentNotLoadingItem() {
        self.sut.successDidSignUpUser(user: User(id: "id"))
        XCTAssertTrue(self.presenterSpy.presentNotLoadingItemCalled)
    }
    
    func testSuccessDidSignUpUserShouldAskThePresenterToPresentEnableItem() {
        self.sut.successDidSignUpUser(user: User(id: "id"))
        XCTAssertTrue(self.presenterSpy.presentEnableItemCalled)
    }
    
    func testSuccessDidSignUpUserShouldAskThePresenterToPresentEnableUserInteraction() {
        self.sut.successDidSignUpUser(user: User(id: "id"))
        XCTAssertTrue(self.presenterSpy.presentEnableUserInteractionCalled)
    }
    
    func testSuccessDidSignUpUserShouldAskThePresenterToPresentUserDetails() {
        self.sut.successDidSignUpUser(user: User(id: "id"))
        XCTAssertTrue(self.presenterSpy.presentUserDetailsCalled)
    }
    
    func testFailureDidSignUpUserShouldAskThePresenterToPresentNotLoadingItem() {
        self.sut.failureDidSignUpUser(details: SignUpModels.UserDetails(), error: OperationError.noDataAvailable)
        XCTAssertTrue(self.presenterSpy.presentNotLoadingItemCalled)
    }
    
    func testFailureDidSignUpUserShouldAskThePresenterToPresentEnableItem() {
        self.sut.failureDidSignUpUser(details: SignUpModels.UserDetails(), error: OperationError.noDataAvailable)
        XCTAssertTrue(self.presenterSpy.presentEnableItemCalled)
    }
    
    func testFailureDidSignUpUserShouldAskThePresenterToPresentEnableUserInteraction() {
        self.sut.failureDidSignUpUser(details: SignUpModels.UserDetails(), error: OperationError.noDataAvailable)
        XCTAssertTrue(self.presenterSpy.presentEnableUserInteractionCalled)
    }
    
    func testFailureDidSignUpUserShouldAskThePresenterToPresentErrorDetails() {
        self.sut.failureDidSignUpUser(details: SignUpModels.UserDetails(), error: OperationError.noDataAvailable)
        XCTAssertTrue(self.presenterSpy.presentErrorDetailsCalled)
    }
}
