//
//  MainViewControllerTests.swift
//  Travelling
//
//  Created by Dimitri Strauneanu on 12/09/2020.
//  Copyright (c) 2020 Travelling. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import Travelling
import XCTest

class MainViewControllerTests: BaseTestCase {
    var sut: MainViewController!
    var interactorSpy: MainBusinessLogicSpy!
    var routerSpy: MainRoutingLogicSpy!
    var myProfileViewControllerSpy: MyProfileViewControllerSpy!
    var myFavoritePlacesViewControllerSpy: MyFavoritePlacesViewControllerSpy!
    var window: UIWindow!
    
    // MARK: - Test lifecycle
    
    override func setUp() {
        super.setUp()
        self.window = UIWindow()
        self.setupMainViewController()
    }
    
    override func tearDown() {
        self.window = nil
        super.tearDown()
    }
    
    // MARK: - Test setup
    
    func setupMainViewController() {
        self.sut = MainViewController()
        
        self.interactorSpy = MainBusinessLogicSpy()
        self.sut.interactor = self.interactorSpy
        
        self.routerSpy = MainRoutingLogicSpy()
        self.sut.router = self.routerSpy
        
        self.myProfileViewControllerSpy = MyProfileViewControllerSpy()
        self.sut.myProfileViewController = self.myProfileViewControllerSpy
        
        self.myFavoritePlacesViewControllerSpy = MyFavoritePlacesViewControllerSpy()
        self.sut.myFavoritePlacesViewController = self.myFavoritePlacesViewControllerSpy
    }
    
    func loadView() {
        self.window.addSubview(self.sut.view)
        RunLoop.current.run(until: Date())
    }
    
    func testEmptyInitializer() {
        XCTAssertNotNil(MainViewController())
    }
    
    // MARK: - Business logic tests
    
    func testMyProfileViewControllerDidLogoutUserShouldAskTheInteractorToLogoutUser() {
        self.sut.myProfileViewControllerDidLogoutUser(viewController: nil)
        XCTAssertTrue(self.interactorSpy.shouldLogoutUserCalled)
    }
    
    func testTabBarControllerShouldSelectViewControllerShouldAskTheInteractorToSelectScene() {
        self.waitForMainQueue()
        let viewController = UIViewController()
        self.sut.setViewControllers([viewController], animated: false)
        let _ = self.sut.tabBarController(self.sut, shouldSelect: viewController)
        XCTAssertTrue(self.interactorSpy.shouldSelectSceneCalled)
    }
    
    func testTabBarControllerShouldSelectViewControllerShouldAskTheInteractorToNavigateToOnboarding() {
        let viewController = UIViewController()
        self.sut.setViewControllers([viewController], animated: false)
        let _ = self.sut.tabBarController(self.sut, shouldSelect: viewController)
        XCTAssertTrue(self.interactorSpy.shouldNavigateToOnboardingCalled)
    }
    
    func testOnboardingViewControllerDidLoginUser() {
        self.sut.onboardingViewController(nil, didLoginUser: User(id: "userId"))
        XCTAssertTrue(self.interactorSpy.shouldLoginUserCalled)
    }
    
    func testOnboardingViewControllerDidSignUpUser() {
        self.sut.onboardingViewController(nil, didSignUpUser: User(id: "userId"))
        XCTAssertTrue(self.interactorSpy.shouldLoginUserCalled)
    }
    
    // MARK: - Display logic tests
    
    func testDisplaySetupScenesShouldSetViewControllers() {
        self.waitForMainQueue()
        let indices: [Int] = [0, 1, 2]
        self.sut.setViewControllers([], animated: false)
        self.sut.displaySetupScenes(viewModel: MainModels.ScenesSetup.ViewModel(indices: indices))
        self.waitForMainQueue()
        XCTAssertEqual(self.sut.viewControllers?.count, indices.count)
    }
    
    func testDisplaySelectSceneShouldSetSelectedIndex() {
        self.waitForMainQueue()
        self.sut.setViewControllers([UIViewController(), UIViewController()], animated: false)
        self.sut.selectedIndex = 0
        let index: Int = 1
        self.sut.displaySelectScene(viewModel: MainModels.SceneSelection.ViewModel(index: index))
        self.waitForMainQueue()
        XCTAssertEqual(self.sut.selectedIndex, index)
    }
    
    func testDisplayNavigateToOnboardingShouldAskTheRouterToNavigateToOnboarding() {
        self.sut.displayNavigateToOnboarding()
        self.waitForMainQueue()
        XCTAssertTrue(self.routerSpy.navigateToOnboardingCalled)
    }
    
    func testDisplayDismissOnboardingShouldAskTheRouterToDismissViewController() {
        self.sut.displayDismissOnboarding()
        self.waitForMainQueue()
        XCTAssertTrue(self.routerSpy.dismissViewControllerCalled)
    }
    
    func testDisplayLoginUserShouldAskMyProfileViewControllerToLoginUser() {
        self.sut.displayLoginUser(viewModel: MainModels.UserLogin.ViewModel(user: User(id: "id")))
        self.waitForMainQueue()
        XCTAssertTrue(self.myProfileViewControllerSpy.shouldLoginUserCalled)
    }
    
    func testDisplayLoginUserShouldAskMyFavoritePlacesViewControllerToLoginUser() {
        self.sut.displayLoginUser(viewModel: MainModels.UserLogin.ViewModel(user: User(id: "id")))
        self.waitForMainQueue()
        XCTAssertTrue(self.myFavoritePlacesViewControllerSpy.shouldLoginUserCalled)
    }
    
    func testDisplayLogoutUserShouldAskMyProfileViewControllerToLogoutUser() {
        self.sut.displayLogoutUser()
        self.waitForMainQueue()
        XCTAssertTrue(self.myProfileViewControllerSpy.shouldLogoutUserCalled)
    }
    
    func testDisplayLogoutUserShouldAskMyFavoritePlacesViewControllerToLogoutUser() {
        self.sut.displayLogoutUser()
        self.waitForMainQueue()
        XCTAssertTrue(self.myFavoritePlacesViewControllerSpy.shouldLogoutUserCalled)
    }
}
