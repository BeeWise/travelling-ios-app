//
//  FullscreenImageInteractor.swift
//  Travelling
//
//  Created by Dimitri Strauneanu on 04/10/2020.
//  Copyright (c) 2020 Travelling. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol FullscreenImageBusinessLogic {
    func shouldSetImage(request: FullscreenImageModels.ImageSetup.Request)
    
    func shouldFetchImage()
}

class FullscreenImageInteractor: FullscreenImageBusinessLogic {
    var presenter: FullscreenImagePresentationLogic?
    var worker: FullscreenImageWorker?
    
    var imageName: String?
    var isFetchingImage: Bool = false
    
    init() {
        self.worker = FullscreenImageWorker(delegate: self)
    }
    
    func shouldSetImage(request: FullscreenImageModels.ImageSetup.Request) {
        self.imageName = request.name
    }
}

extension FullscreenImageInteractor: FullscreenImageWorkerDelegate {
    func shouldFetchImage() {
        if self.imageName.isNilOrEmpty() {
            self.presenter?.presentPlaceholderImage()
        } else if !self.imageName.isNilOrEmpty() && !self.isFetchingImage {
            self.isFetchingImage = true
            self.presenter?.presentWillFetchImage()
            self.worker?.fetchImage(name: self.imageName)
        }
    }
    
    func successDidFetchImage(image: UIImage?) {
        self.presenter?.presentImage(response: FullscreenImageModels.ImagePresentation.Response(image: image))
        self.presenter?.presentDidFetchImage()
        self.isFetchingImage = false
    }
    
    func failureDidFetchImage(error: OperationError) {
        self.presenter?.presentPlaceholderImage()
        self.presenter?.presentDidFetchImage()
        self.isFetchingImage = false
    }
}
