//
//  ExploreViewController.swift
//  Travelling
//
//  Created by Dimitri Strauneanu on 13/09/2020.
//  Copyright (c) 2020 Travelling. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

class ExploreViewController: UITableViewController {
    var interactor: ExploreBusinessLogic?
    var router: ExploreRoutingLogic?
    
    var sections: [ExploreModels.Section] = [ExploreModels.Section(), ExploreModels.Section()]
    
    // MARK: - Object lifecycle
    
    convenience init() {
        self.init(style: .grouped)
    }
    
    override init(style: UITableView.Style) {
        super.init(style: style)
        self.setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        return nil
    }
    
    // MARK: - Setup
    
    private func setup() {
        let viewController = self
        let interactor = ExploreInteractor()
        let presenter = ExplorePresenter()
        let router = ExploreRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.displayer = viewController
        router.viewController = viewController
    }
    
    // MARK: - View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        self.setupSubviews()
        self.interactor?.shouldFetchItems()
    }
}

extension ExploreViewController {
    override func traitCollectionDidChange(_ previousTraitCollection: UITraitCollection?) {
        super.traitCollectionDidChange(previousTraitCollection)
        if previousTraitCollection?.preferredContentSizeCategory != self.traitCollection.preferredContentSizeCategory {
            self.interactor?.shouldFetchItems()
        }
    }
}

extension ExploreViewController: UISearchControllerDelegate, UISearchResultsUpdating, UISearchBarDelegate {
    func updateSearchResults(for searchController: UISearchController) {
        self.interactor?.shouldSearchItems(request: ExploreModels.ItemsSearching.Request(text: searchController.searchBar.text))
    }
    
    func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {
        self.interactor?.shouldSearchItems(request: ExploreModels.ItemsSearching.Request(text: searchBar.text))
    }
    
    func searchBarCancelButtonClicked(_ searchBar: UISearchBar) {
        self.interactor?.shouldEndSearchState()
    }
        
    func searchBarTextDidBeginEditing(_ searchBar: UISearchBar) {
        self.interactor?.shouldBeginSearchState()
    }
}
