//
//  ExploreStyle.swift
//  Travelling
//
//  Created by Dimitri Strauneanu on 13/09/2020.
//  Copyright (c) 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

class ExploreStyle {
    static let shared = ExploreStyle()
    
    var navigationBarModel: NavigationBarModel
    
    var contentViewModel: ContentViewModel
    var tableViewModel: TableViewModel
    var cellModel: CellModel
    var emptyStateViewModel: EmptyStateViewModel
    var noMorePlacesViewModel: NoMorePlacesViewModel
    var errorStateViewModel: ErrorStateViewModel
    
    private init() {
        self.navigationBarModel = NavigationBarModel()
        self.contentViewModel = ContentViewModel()
        self.tableViewModel = TableViewModel()
        self.cellModel = CellModel()
        self.emptyStateViewModel = EmptyStateViewModel()
        self.noMorePlacesViewModel = NoMorePlacesViewModel()
        self.errorStateViewModel = ErrorStateViewModel()
    }
    
    struct NavigationBarModel {
        var isTranslucent: Bool = false
        var tintColor: UIColor = ApplicationStyle.colors.primary
        var barTintColor: UIColor = ApplicationStyle.colors.primaryLight
        
        func titleAttributes() -> [NSAttributedString.Key: Any] {
            return [
                NSAttributedString.Key.foregroundColor: ApplicationStyle.colors.primary,
                NSAttributedString.Key.font: ApplicationStyle.fonts.bold(size: UIFont.labelFontSize)
            ]
        }
    }
    
    struct ContentViewModel {
        var backgroundColor = ApplicationStyle.colors.accentAlpha
    }
    
    struct TableViewModel {
        var backgroundColor = ApplicationStyle.colors.accentAlpha
        var separatorColor: UIColor = ApplicationStyle.colors.accent
        var activityIndicatorColor: UIColor = ApplicationStyle.colors.primary
        
        var itemsSectionFooterHeight: CGFloat = 8
        var footerSectionFooterHeight: CGFloat = 15
    }
    
    struct CellModel {
        func titleAttributes() -> [NSAttributedString.Key: Any] {
            return [
                NSAttributedString.Key.foregroundColor: ApplicationStyle.colors.primary,
                NSAttributedString.Key.font: ApplicationStyle.fonts.preferredFont(style: .body)
            ]
        }
        
        var backgroundColor: UIColor = ApplicationStyle.colors.primaryLight
        
        var containerViewBackgroundColor = ApplicationStyle.colors.primaryLight
        var containerViewCornerRadius: CGFloat = 10
        var containerViewMinimumHeight: CGFloat = 150
        
        var blurredBackgroundColor: UIColor = ApplicationStyle.colors.primary.withAlphaComponent(0.25)
    }
    
    struct EmptyStateViewModel {
        var image: UIImage = UIImage()
        
        func textAttributes() -> [NSAttributedString.Key: Any] {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            return [
                NSAttributedString.Key.foregroundColor: ApplicationStyle.colors.accent,
                NSAttributedString.Key.font: ApplicationStyle.fonts.preferredFont(style: .title2).bold(),
                NSAttributedString.Key.paragraphStyle: paragraphStyle
            ]
        }
    }
    
    struct NoMorePlacesViewModel {
        func textAttributes() -> [NSAttributedString.Key: Any] {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            return [
                NSAttributedString.Key.foregroundColor: ApplicationStyle.colors.accent,
                NSAttributedString.Key.font: ApplicationStyle.fonts.preferredFont(style: .footnote),
                NSAttributedString.Key.paragraphStyle: paragraphStyle
            ]
        }
    }
    
    struct ErrorStateViewModel {
        func textAttributes() -> [NSAttributedString.Key: Any] {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            return [
                NSAttributedString.Key.foregroundColor: ApplicationStyle.colors.accent,
                NSAttributedString.Key.font: ApplicationStyle.fonts.preferredFont(style: .footnote),
                NSAttributedString.Key.paragraphStyle: paragraphStyle
            ]
        }
    }
}
