//
//  ExploreInteractor.swift
//  Travelling
//
//  Created by Dimitri Strauneanu on 13/09/2020.
//  Copyright (c) 2020 Travelling. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ExploreBusinessLogic {
    func shouldFetchItems()
    func shouldFetchImage(request: ExploreModels.ImageFetching.Request)
}

class ExploreInteractor: ExploreBusinessLogic, ExploreWorkerDelegate {
    var presenter: ExplorePresentationLogic?
    var worker: ExploreWorker?
    
    var paginationModel: ExploreModels.PaginationModel
    
    init() {
        self.paginationModel = ExploreModels.PaginationModel()
        self.worker = ExploreWorker(delegate: self)
    }
}

extension ExploreInteractor {
    func shouldFetchImage(request: ExploreModels.ImageFetching.Request) {
        let item = request.item
        if item.image == nil && item.imageName.isNilOrEmpty() {
            self.presenter?.presentPlaceholderImage(response: ExploreModels.ImagePresentation.Response(item: item, image: nil))
        } else if item.image == nil && !item.imageName.isNilOrEmpty() && !item.isLoadingImage {
            self.presenter?.presentWillFetchImage(response: ExploreModels.ImageFetching.Response(item: item))
            self.worker?.fetchImage(item: item)
        }
    }
    
    func successDidFetchImage(item: ExploreModels.DisplayedItem, image: UIImage?) {
        self.presenter?.presentImage(response: ExploreModels.ImagePresentation.Response(item: item, image: image))
        self.presenter?.presentDidFetchImage(response: ExploreModels.ImageFetching.Response(item: item))
    }
    
    func failureDidFetchImage(item: ExploreModels.DisplayedItem, error: OperationError) {
        self.presenter?.presentPlaceholderImage(response: ExploreModels.ImagePresentation.Response(item: item, image: nil))
        self.presenter?.presentDidFetchImage(response: ExploreModels.ImageFetching.Response(item: item))
    }
}

extension ExploreInteractor  {
    func shouldFetchItems() {
        if !self.paginationModel.isFetchingItems && !self.paginationModel.noMoreItems {
            self.paginationModel.isFetchingItems = true
            self.presenter?.presentWillFetchItems()
            self.worker?.fetchItems(page: self.paginationModel.currentPage, limit: self.paginationModel.limit)
        }
    }
    
    func successDidFetchItems(items: [Place]) {
        self.paginationModel.items.append(contentsOf: items)
        self.paginationModel.currentPage += 1
        self.paginationModel.isFetchingItems = false
        self.paginationModel.hasError = false
        self.presenter?.presentDidFetchItems()
        self.presenter?.presentRemoveErrorState()
        self.presenter?.presentItems(response: ExploreModels.ItemsPresentation.Response(items: items))
        self.shouldVerifyNoMorePlaces(count: items.count)
        self.shouldVerifyEmptyState(count: items.count)
    }
    
    func failureDidFetchItems(error: OperationError) {
        self.paginationModel.isFetchingItems = false
        self.paginationModel.hasError = true
        self.presenter?.presentDidFetchItems()
        self.presenter?.presentErrorState()
    }
}

extension ExploreInteractor {
    private func shouldVerifyNoMorePlaces(count: Int) {
        if count < self.paginationModel.limit {
            self.paginationModel.noMoreItems = true
            self.presenter?.presentNoMoreItems()
        }
    }
    
    private func shouldVerifyEmptyState(count: Int) {
        if count == 0 && self.paginationModel.items.count == 0 {
            self.presenter?.presentEmptyState()
            self.presenter?.presentRemoveNoMoreItems()
        }
    }
}
