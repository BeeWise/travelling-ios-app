//
//  ExplorePresenter.swift
//  Travelling
//
//  Created by Dimitri Strauneanu on 13/09/2020.
//  Copyright (c) 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ExplorePresentationLogic {
    func presentWillFetchItems()
    func presentDidFetchItems()
    
    func presentItems(response: ExploreModels.ItemsPresentation.Response)
    
    func presentNoMoreItems()
    func presentRemoveNoMoreItems()
    
    func presentEmptyState()
    func presentRemoveEmptyState()
    
    func presentErrorState()
    func presentRemoveErrorState()
}

class ExplorePresenter: ExplorePresentationLogic {
    weak var displayer: ExploreDisplayLogic?
    
    func presentWillFetchItems() {
        self.displayer?.displayWillFetchItems()
    }
    
    func presentDidFetchItems() {
        self.displayer?.displayDidFetchItems()
    }
    
    func presentItems(response: ExploreModels.ItemsPresentation.Response) {
        self.displayer?.displayItems(viewModel: ExploreModels.ItemsPresentation.ViewModel(displayedItems: self.displayedItems(items: response.items)))
    }
    
    func presentNoMoreItems() {
        let text = NSAttributedString(string: ExploreLocalization.shared.noMorePlacesText, attributes: ExploreStyle.shared.noMorePlacesViewModel.textAttributes())
        self.displayer?.displayNoMoreItems(viewModel: ExploreModels.NoMoreItemsPresentation.ViewModel(text: text))
    }
    
    func presentRemoveNoMoreItems() {
        self.displayer?.displayRemoveNoMoreItems()
    }
    
    func presentEmptyState() {
        let image = ExploreStyle.shared.emptyStateViewModel.image
        let text = NSAttributedString(string: ExploreLocalization.shared.emptyStateText, attributes: ExploreStyle.shared.emptyStateViewModel.textAttributes())
        self.displayer?.displayEmptyState(viewModel: ExploreModels.EmptyStatePresentation.ViewModel(image: image, text: text))
    }
    
    func presentRemoveEmptyState() {
        self.displayer?.displayRemoveEmptyState()
    }
    
    func presentErrorState() {
        let text = NSAttributedString(string: ExploreLocalization.shared.errorStateText, attributes: ExploreStyle.shared.errorStateViewModel.textAttributes())
        self.displayer?.displayErrorState(viewModel: ExploreModels.ErrorStatePresentation.ViewModel(text: text))
    }
    
    func presentRemoveErrorState() {
        self.displayer?.displayRemoveErrorState()
    }
}

// MARK: - Auxiliary

extension ExplorePresenter {
    private func displayedItems(items: [Place]) -> [ExploreModels.DisplayedItem] {
        return items.map({ self.displayedItem(item: $0) })
    }
    
    private func displayedItem(item: Place) -> ExploreModels.DisplayedItem {
        let displayedItem = ExploreModels.DisplayedItem(id: item.id)
        displayedItem.title = self.displayedTitle(location: item.location)
        return displayedItem
    }
    
    private func displayedTitle(location: Location) -> NSAttributedString? {
        let values: [String?] = [location.city, location.country]
        let text = values.compactMap({ $0 }).joined(separator: ", ")
        return text.attributed(attributes: ExploreStyle.shared.cellModel.titleAttributes())
    }
}
