//
//  PlaceCommentsPresenter.swift
//  Travelling
//
//  Created by Dimitri Strauneanu on 12/10/2020.
//  Copyright (c) 2020 Travelling. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol PlaceCommentsPresentationLogic {
    func presentWillFetchItems()
    func presentDidFetchItems()
    
    func presentItems(response: PlaceCommentsModels.ItemsPresentation.Response)
    func presentNewItems(response: PlaceCommentsModels.ItemsPresentation.Response)
    
    func presentNoMoreItems()
    func presentRemoveNoMoreItems()
    
    func presentEmptyState()
    func presentRemoveEmptyState()
    
    func presentErrorState()
    func presentRemoveErrorState()
    
    func presentWillFetchImage(response: PlaceCommentsModels.ImageFetching.Response)
    func presentDidFetchImage(response: PlaceCommentsModels.ImageFetching.Response)
    func presentImage(response: PlaceCommentsModels.ImagePresentation.Response)
    func presentPlaceholderImage(response: PlaceCommentsModels.ImagePresentation.Response)
}

class PlaceCommentsPresenter: PlaceCommentsPresentationLogic {
    weak var displayer: PlaceCommentsDisplayLogic?
    
    var iso8601DateFormatter: ISO8601DateFormatter = ISO8601DateFormatter()
    var dateFormatter: DateFormatter = DateFormatter()
    
    init() {
        self.dateFormatter.dateStyle = .medium
        self.dateFormatter.timeStyle = .none
    }
    
    func presentWillFetchItems() {
        self.displayer?.displayWillFetchItems()
    }
    
    func presentDidFetchItems() {
        self.displayer?.displayDidFetchItems()
    }
    
    func presentItems(response: PlaceCommentsModels.ItemsPresentation.Response) {
        self.displayer?.displayItems(viewModel: PlaceCommentsModels.ItemsPresentation.ViewModel(displayedItems: self.displayedItems(items: response.items)))
    }
    
    func presentNewItems(response: PlaceCommentsModels.ItemsPresentation.Response) {
        self.displayer?.displayNewItems(viewModel: PlaceCommentsModels.ItemsPresentation.ViewModel(displayedItems: self.displayedItems(items: response.items)))
    }
    
    func presentNoMoreItems() {
        let text = NSAttributedString(string: PlaceCommentsLocalization.shared.noMorePlacesText, attributes: PlaceCommentsStyle.shared.noMorePlacesViewModel.textAttributes())
        self.displayer?.displayNoMoreItems(viewModel: PlaceCommentsModels.NoMoreItemsPresentation.ViewModel(text: text))
    }
    
    func presentRemoveNoMoreItems() {
        self.displayer?.displayRemoveNoMoreItems()
    }
    
    func presentEmptyState() {
        let image = PlaceCommentsStyle.shared.emptyStateViewModel.image
        let text = NSAttributedString(string: PlaceCommentsLocalization.shared.emptyStateText, attributes: PlaceCommentsStyle.shared.emptyStateViewModel.textAttributes())
        self.displayer?.displayEmptyState(viewModel: PlaceCommentsModels.EmptyStatePresentation.ViewModel(image: image, text: text))
    }
    
    func presentRemoveEmptyState() {
        self.displayer?.displayRemoveEmptyState()
    }
    
    func presentErrorState() {
        let text = NSAttributedString(string: PlaceCommentsLocalization.shared.errorStateText, attributes: PlaceCommentsStyle.shared.errorStateViewModel.textAttributes())
        self.displayer?.displayErrorState(viewModel: PlaceCommentsModels.ErrorStatePresentation.ViewModel(text: text))
    }
    
    func presentRemoveErrorState() {
        self.displayer?.displayRemoveErrorState()
    }
    
    func presentWillFetchImage(response: PlaceCommentsModels.ImageFetching.Response) {
        self.displayer?.displayWillFetchImage(viewModel: PlaceCommentsModels.ImageFetching.ViewModel(item: response.item))
    }
    
    func presentDidFetchImage(response: PlaceCommentsModels.ImageFetching.Response) {
        self.displayer?.displayDidFetchImage(viewModel: PlaceCommentsModels.ImageFetching.ViewModel(item: response.item))
    }
    
    func presentImage(response: PlaceCommentsModels.ImagePresentation.Response) {
        self.displayer?.displayImage(viewModel: PlaceCommentsModels.ImagePresentation.ViewModel(item: response.item, image: response.image, contentMode: .scaleAspectFill))
    }
    
    func presentPlaceholderImage(response: PlaceCommentsModels.ImagePresentation.Response) {
        let image = PlaceCommentsStyle.shared.cellModel.placeholderImage
        self.displayer?.displayImage(viewModel: PlaceCommentsModels.ImagePresentation.ViewModel(item: response.item, image: image, contentMode: .center))
    }
}

// MARK: - Auxiliary

extension PlaceCommentsPresenter {
    private func displayedItems(items: [Comment]) -> [PlaceCommentsModels.DisplayedItem] {
        return items.map({ self.displayedItem(item: $0) })
    }
    
    private func displayedItem(item: Comment) -> PlaceCommentsModels.DisplayedItem {
        let displayedItem = PlaceCommentsModels.DisplayedItem(id: item.id)
        displayedItem.name = self.displayedUserName(user: item.user).attributed(attributes: PlaceCommentsStyle.shared.cellModel.nameAttributes())
        displayedItem.text = item.text?.attributed(attributes: PlaceCommentsStyle.shared.cellModel.textAttributes())
        displayedItem.time = self.displayedTime(createdAt: item.createdAt)?.attributed(attributes: PlaceCommentsStyle.shared.cellModel.timeAttributes())
        displayedItem.imageName = item.user?.photo?.imageName
        displayedItem.imageDominantColor = item.user?.photo?.imageDominantColor?.hexColor()
        return displayedItem
    }
    
    private func displayedUserName(user: User?) -> String {
        let firstName = user?.firstName ?? ""
        let lastName = user?.lastName ?? ""
        return String(format: "%@ %@", firstName, lastName)
    }
    
    private func displayedTime(createdAt: String?) -> String? {
        guard let createdAt = createdAt else {
            return nil
        }
        guard let date = self.iso8601DateFormatter.date(from: createdAt) else {
            return nil
        }
        return self.dateFormatter.string(from: date)
    }
}
