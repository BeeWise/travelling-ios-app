//
//  LoginModels.swift
//  Travelling
//
//  Created by Dimitri Strauneanu on 04/10/2020.
//  Copyright (c) 2020 Travelling. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

enum LoginModels {
    class Item {
        var type: ItemType
        var model: Any?
        
        init(type: ItemType, model: Any?) {
            self.type = type
            self.model = model
        }
    }
    
    class DisplayedButtonItem {
        var title: NSAttributedString?
        var isEnabled: Bool = false
        var isLoading: Bool = false
    }
    
    class DisplayedTextItem {
        var title: String = ""
        var text: String = ""
        var placeholder: String = ""
        var keyboardType: UIKeyboardType = .default
        var returnKeyType: UIReturnKeyType = .next
        var autocapitalizationType: UITextAutocapitalizationType = .none
        var autocorrectionType: UITextAutocorrectionType = .no
        var isSecureText: Bool = false
        
        var errorText: String = ""
        var displayError: Bool = false
    }
    
    enum ItemType: CaseIterable {
        case account
        case password
        case forgotPassword
        case login
    }
    
    enum SetupItems {
        struct ViewModel {
            var displayedItems: [Item]
        }
    }
    
    struct LoginDetails {
        var account: String = ""
        var password: String = ""
    }
    
    enum UpdateItem {
        struct Request {
            let text: String
            let type: ItemType
        }
        
        struct Response {
            let text: String
            let type: ItemType
        }
        
        struct ViewModel {
            let text: String
            let type: ItemType
        }
    }
    
    enum ValidateItem {
        struct Request {
            let type: ItemType
        }
        
        struct Response {
            let type: ItemType
            let displayError: Bool
        }
        
        struct ViewModel {
            let type: ItemType
            let displayError: Bool
        }
    }
    
    enum ActivateTextField {
        struct Request {
            let type: ItemType
        }
        
        struct Response {
            let type: ItemType
        }
        
        struct ViewModel {
            let type: ItemType
        }
    }
    
    enum EnableItem {
        struct Request {
            let type: ItemType
        }
        
        struct Response {
            let type: ItemType
        }
        
        struct ViewModel {
            let type: ItemType
        }
    }
    
    enum LoadingItem {
        struct Response {
            let type: ItemType
        }
        
        struct ViewModel {
            let type: ItemType
        }
    }
    
    enum LoginError {
        struct Response {
            let error: OperationError
        }
        
        struct ViewModel {
            let message: String
            let okTitle: String
        }
    }
    
    enum UserDetails {
        struct Response {
            let user: User
        }
        
        struct ViewModel {
            let user: User
        }
    }
    
    enum ItemSelection {
        struct Request {
            let type: ItemType
        }
    }
}
