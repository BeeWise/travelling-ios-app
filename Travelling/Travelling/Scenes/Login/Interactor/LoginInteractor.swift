//
//  LoginInteractor.swift
//  Travelling
//
//  Created by Dimitri Strauneanu on 04/10/2020.
//  Copyright (c) 2020 Travelling. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol LoginBusinessLogic {
    func shouldSetupItems()
    
    func shouldUpdateItem(request: LoginModels.UpdateItem.Request)
    func shouldValidateItem(request: LoginModels.ValidateItem.Request)
    
    func shouldActivateTextField(request: LoginModels.ActivateTextField.Request)
    
    func shouldSelectItem(request: LoginModels.ItemSelection.Request)
}

class LoginInteractor: LoginBusinessLogic {
    var presenter: LoginPresentationLogic?
    var worker: LoginWorker?
    
    var loginDetails: LoginModels.LoginDetails
    
    init() {
        self.loginDetails = LoginModels.LoginDetails()
        self.worker = LoginWorker(delegate: self)
    }
    
    func shouldSetupItems() {
        self.presenter?.presentSetupItems()
    }
    
    func shouldUpdateItem(request: LoginModels.UpdateItem.Request) {
        let text = request.text
        switch request.type {
            case .account: self.loginDetails.account = text; break
            case .password: self.loginDetails.password = text; break
            default: break
        }
        
        self.presenter?.presentUpdateItem(response: LoginModels.UpdateItem.Response(text: text, type: request.type))
        self.validateAllItems()
    }
    
    func shouldActivateTextField(request: LoginModels.ActivateTextField.Request) {
        self.presenter?.presentActivateTextField(response: LoginModels.ActivateTextField.Response(type: request.type))
    }
    
    private func shouldLoginUser() {
        self.presenter?.presentDisableUserInteraction()
        self.presenter?.presentDisableItem(response: LoginModels.EnableItem.Response(type: LoginModels.ItemType.login))
        self.presenter?.presentLoadingItem(response: LoginModels.LoadingItem.Response(type: LoginModels.ItemType.login))
        self.worker?.loginUser(details: self.loginDetails)
    }
    
    private func shouldNavigateToForgotPassword() {
        self.presenter?.presentNavigateToForgotPassword()
    }
    
    func shouldSelectItem(request: LoginModels.ItemSelection.Request) {
        switch request.type {
            case .login: self.shouldLoginUser(); break
            case .forgotPassword: self.shouldNavigateToForgotPassword(); break
            default: break
        }
    }
}

extension LoginInteractor: LoginWorkerDelegate {
    func successDidLoginUser(user: User) {
        self.presenter?.presentNotLoadingItem(response: LoginModels.LoadingItem.Response(type: LoginModels.ItemType.login))
        self.presenter?.presentEnableItem(response: LoginModels.EnableItem.Response(type: LoginModels.ItemType.login))
        self.presenter?.presentEnableUserInteraction()
        self.presenter?.presentUserDetails(response: LoginModels.UserDetails.Response(user: user))
    }
    
    func failureDidLoginUser(details: LoginModels.LoginDetails, error: OperationError) {
        self.presenter?.presentNotLoadingItem(response: LoginModels.LoadingItem.Response(type: LoginModels.ItemType.login))
        self.presenter?.presentEnableItem(response: LoginModels.EnableItem.Response(type: LoginModels.ItemType.login))
        self.presenter?.presentEnableUserInteraction()
        self.presenter?.presentErrorAlert(response: LoginModels.LoginError.Response(error: error))
    }
}
