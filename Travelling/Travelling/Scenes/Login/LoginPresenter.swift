//
//  LoginPresenter.swift
//  Travelling
//
//  Created by Dimitri Strauneanu on 04/10/2020.
//  Copyright (c) 2020 Travelling. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol LoginPresentationLogic {
    func presentSetupItems()
    
    func presentUpdateItem(response: LoginModels.UpdateItem.Response)
    func presentValidationError(response: LoginModels.ValidateItem.Response)
    
    func presentActivateTextField(response: LoginModels.ActivateTextField.Response)
    
    func presentEnableItem(response: LoginModels.EnableItem.Response)
    func presentDisableItem(response: LoginModels.EnableItem.Response)
    
    func presentLoadingItem(response: LoginModels.LoadingItem.Response)
    func presentNotLoadingItem(response: LoginModels.LoadingItem.Response)
    
    func presentEnableUserInteraction()
    func presentDisableUserInteraction()
    
    func presentNavigateToForgotPassword()
    
    func presentUserDetails(response: LoginModels.UserDetails.Response)
    func presentErrorAlert(response: LoginModels.LoginError.Response)
}

class LoginPresenter: LoginPresentationLogic {
    weak var displayer: LoginDisplayLogic?
    
    func presentSetupItems() {
        let viewModel = LoginModels.SetupItems.ViewModel(displayedItems: self.items())
        self.displayer?.displaySetupItems(viewModel: viewModel)
    }
    
    func presentUpdateItem(response: LoginModels.UpdateItem.Response) {
        let viewModel = LoginModels.UpdateItem.ViewModel(text: response.text, type: response.type)
        self.displayer?.displayUpdateItem(viewModel: viewModel)
    }
    
    func presentValidationError(response: LoginModels.ValidateItem.Response) {
        let viewModel = LoginModels.ValidateItem.ViewModel(type: response.type, displayError: response.displayError)
        self.displayer?.displayValidationError(viewModel: viewModel)
    }
    
    func presentActivateTextField(response: LoginModels.ActivateTextField.Response) {
        self.displayer?.displayActivateTextField(viewModel: LoginModels.ActivateTextField.ViewModel(type: response.type))
    }
    
    func presentEnableItem(response: LoginModels.EnableItem.Response) {
        self.displayer?.displayEnableItem(viewModel: LoginModels.EnableItem.ViewModel(type: response.type))
    }
    
    func presentDisableItem(response: LoginModels.EnableItem.Response) {
        self.displayer?.displayDisableItem(viewModel: LoginModels.EnableItem.ViewModel(type: response.type))
    }
    
    func presentLoadingItem(response: LoginModels.LoadingItem.Response) {
        self.displayer?.displayLoadingItem(viewModel: LoginModels.LoadingItem.ViewModel(type: response.type))
    }
    
    func presentNotLoadingItem(response: LoginModels.LoadingItem.Response) {
        self.displayer?.displayNotLoadingItem(viewModel: LoginModels.LoadingItem.ViewModel(type: response.type))
    }
    
    func presentEnableUserInteraction() {
        self.displayer?.displayEnableUserInteraction()
    }
    
    func presentDisableUserInteraction() {
        self.displayer?.displayDisableUserInteraction()
    }
    
    func presentNavigateToForgotPassword() {
        self.displayer?.displayNavigateToForgotPassword()
    }
    
    func presentUserDetails(response: LoginModels.UserDetails.Response) {
        self.displayer?.displayUserDetails(viewModel: LoginModels.UserDetails.ViewModel(user: response.user))
    }
    
    func presentErrorAlert(response: LoginModels.LoginError.Response) {
        let message = LoginLocalization.shared.errorMessage
        let okTitle = LoginLocalization.shared.okTitle
        let viewModel = LoginModels.LoginError.ViewModel(message: message, okTitle: okTitle)
        self.displayer?.displayErrorAlert(viewModel: viewModel)
    }
}

// MARK: - Auxiliary

extension LoginPresenter {
    private func items() -> [LoginModels.Item] {
        return [
            self.accountItem(),
            self.passwordItem(),
            self.forgotPasswordItem(),
            self.loginItem()
        ]
    }
    
    private func accountItem() -> LoginModels.Item {
        let model = LoginModels.DisplayedTextItem()
        model.title = LoginLocalization.shared.emailOrUsernameTitle
        model.placeholder = LoginLocalization.shared.emailOrUsernamePlaceholder
        model.keyboardType = .emailAddress
        model.autocapitalizationType = .none
        model.autocorrectionType = .no
        model.returnKeyType = .next
        model.errorText = LoginLocalization.shared.emailOrUsernameErrorText
        return LoginModels.Item(type: LoginModels.ItemType.account, model: model)
    }
    
    private func passwordItem() -> LoginModels.Item {
        let model = LoginModels.DisplayedTextItem()
        model.title = LoginLocalization.shared.passwordTitle
        model.placeholder = LoginLocalization.shared.passwordPlaceholder
        model.autocapitalizationType = .none
        model.autocorrectionType = .no
        model.isSecureText = true
        model.returnKeyType = .done
        model.errorText = LoginLocalization.shared.passwordErrorText
        return LoginModels.Item(type: LoginModels.ItemType.password, model: model)
    }
    
    private func forgotPasswordItem() -> LoginModels.Item {
        let model = LoginModels.DisplayedButtonItem()
        model.title = LoginLocalization.shared.forgotPasswordButtonTitle.attributed(attributes: LoginStyle.shared.forgotPasswordCellModel.textAttributes())
        model.isEnabled = true
        return LoginModels.Item(type: LoginModels.ItemType.forgotPassword, model: model)
    }
    
    private func loginItem() -> LoginModels.Item {
        let model = LoginModels.DisplayedButtonItem()
        model.title = LoginLocalization.shared.loginButtonTitle.attributed(attributes: LoginStyle.shared.buttonCellModel.textAttributes())
        model.isEnabled = false
        return LoginModels.Item(type: LoginModels.ItemType.login, model: model)
    }
}
