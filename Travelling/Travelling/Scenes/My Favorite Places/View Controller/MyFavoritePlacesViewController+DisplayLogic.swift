//
//  MyFavoritePlacesViewController+DisplayLogic.swift
//  Travelling
//
//  Created by Dimitri Strauneanu on 11/10/2020.
//  Copyright (c) 2020 Travelling. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MyFavoritePlacesDisplayLogic: class {
    func displayWillFetchItems()
    func displayDidFetchItems()
    
    func displayItems(viewModel: MyFavoritePlacesModels.ItemsPresentation.ViewModel)
    func displayNewItems(viewModel: MyFavoritePlacesModels.ItemsPresentation.ViewModel)
    
    func displayNoMoreItems(viewModel: MyFavoritePlacesModels.NoMoreItemsPresentation.ViewModel)
    func displayRemoveNoMoreItems()
    
    func displayEmptyState(viewModel: MyFavoritePlacesModels.EmptyStatePresentation.ViewModel)
    func displayRemoveEmptyState()
    
    func displayErrorState(viewModel: MyFavoritePlacesModels.ErrorStatePresentation.ViewModel)
    func displayRemoveErrorState()
    
    func displayWillFetchImage(viewModel: MyFavoritePlacesModels.ImageFetching.ViewModel)
    func displayDidFetchImage(viewModel: MyFavoritePlacesModels.ImageFetching.ViewModel)
    func displayImage(viewModel: MyFavoritePlacesModels.ImagePresentation.ViewModel)
    
    func displayEnableSearchBar()
    func displayDisableSearchBar()
    
    func displayNavigateToPlaceDetails(viewModel: MyFavoritePlacesModels.ItemNavigation.ViewModel)
}

extension MyFavoritePlacesViewController: MyFavoritePlacesDisplayLogic {
    func displayWillFetchItems() {
        DispatchQueue.main.async {
            let section = MyFavoritePlacesModels.SectionIndex.footer.rawValue
            self.sections[section].isLoading = true
            self.tableView?.reloadSectionsWithoutAnimation(sections: IndexSet(integer: section))
        }
    }
    
    func displayDidFetchItems() {
        DispatchQueue.main.async {
            let section = MyFavoritePlacesModels.SectionIndex.footer.rawValue
            self.sections[section].isLoading = false
            self.tableView?.reloadSectionsWithoutAnimation(sections: IndexSet(integer: section))
        }
    }
    
    func displayItems(viewModel: MyFavoritePlacesModels.ItemsPresentation.ViewModel) {
        DispatchQueue.main.async {
            let section = MyFavoritePlacesModels.SectionIndex.items.rawValue
            self.sections[section].items = viewModel.displayedItems
            self.tableView?.reloadSectionsWithoutAnimation(sections: IndexSet(integer: section))
        }
    }
    
    func displayNewItems(viewModel: MyFavoritePlacesModels.ItemsPresentation.ViewModel) {
        DispatchQueue.main.async {
            self.tableView?.performBatchUpdates({
                let section = MyFavoritePlacesModels.SectionIndex.items.rawValue
                let index = self.sections[section].items.count
                let indexPaths = viewModel.displayedItems.enumerated().map({ IndexPath(row: index + $0.offset, section: section) })
                self.sections[section].items.append(contentsOf: viewModel.displayedItems)
                self.tableView?.insertRowsWithoutAnimation(at: indexPaths)
            }, completion: nil)
        }
    }
    
    func displayNoMoreItems(viewModel: MyFavoritePlacesModels.NoMoreItemsPresentation.ViewModel) {
        DispatchQueue.main.async {
            let section = MyFavoritePlacesModels.SectionIndex.footer.rawValue
            self.sections[section].noMoreItemsText = viewModel.text
            self.sections[section].noMoreItems = true
            self.tableView?.reloadSectionsWithoutAnimation(sections: IndexSet(integer: section))
        }
    }
    
    func displayRemoveNoMoreItems() {
        DispatchQueue.main.async {
            let section = MyFavoritePlacesModels.SectionIndex.footer.rawValue
            self.sections[section].noMoreItemsText = nil
            self.sections[section].noMoreItems = false
            self.tableView?.reloadSectionsWithoutAnimation(sections: IndexSet(integer: section))
        }
    }
    
    func displayEmptyState(viewModel: MyFavoritePlacesModels.EmptyStatePresentation.ViewModel) {
        DispatchQueue.main.async {
            self.tableView?.backgroundView = self.emptyStateView(image: viewModel.image, attributedText: viewModel.text)
        }
    }
    
    func displayRemoveEmptyState() {
        DispatchQueue.main.async {
            self.tableView?.backgroundView = nil
        }
    }
    
    func displayErrorState(viewModel: MyFavoritePlacesModels.ErrorStatePresentation.ViewModel) {
        DispatchQueue.main.async {
            let section = MyFavoritePlacesModels.SectionIndex.footer.rawValue
            self.sections[section].errorText = viewModel.text
            self.sections[section].hasError = true
            self.tableView?.reloadSectionsWithoutAnimation(sections: IndexSet(integer: section))
        }
    }
    
    func displayRemoveErrorState() {
        DispatchQueue.main.async {
            let section = MyFavoritePlacesModels.SectionIndex.footer.rawValue
            self.sections[section].errorText = nil
            self.sections[section].hasError = false
            self.tableView?.reloadSectionsWithoutAnimation(sections: IndexSet(integer: section))
        }
    }
    
    func displayWillFetchImage(viewModel: MyFavoritePlacesModels.ImageFetching.ViewModel) {
        DispatchQueue.main.async {
            viewModel.item.isLoadingImage = true
            viewModel.item.cellInterface?.setIsLoadingImage(isLoading: true)
        }
    }
    
    func displayDidFetchImage(viewModel: MyFavoritePlacesModels.ImageFetching.ViewModel) {
        DispatchQueue.main.async {
            viewModel.item.isLoadingImage = false
            viewModel.item.cellInterface?.setIsLoadingImage(isLoading: false)
        }
    }
    
    func displayImage(viewModel: MyFavoritePlacesModels.ImagePresentation.ViewModel) {
        DispatchQueue.main.async {
            viewModel.item.image = viewModel.image
            viewModel.item.imageContentMode = viewModel.contentMode
            viewModel.item.cellInterface?.setImage(image: viewModel.image, contentMode: viewModel.contentMode)
        }
    }
    
    func displayEnableSearchBar() {
        DispatchQueue.main.async {
            self.navigationItem.searchController?.searchBar.isUserInteractionEnabled = true
            self.navigationItem.searchController?.searchBar.alpha = 1.0
        }
    }
    
    func displayDisableSearchBar() {
        DispatchQueue.main.async {
            self.navigationItem.searchController?.searchBar.isUserInteractionEnabled = false
            self.navigationItem.searchController?.searchBar.alpha = 0.25
        }
    }
    
    func displayNavigateToPlaceDetails(viewModel: MyFavoritePlacesModels.ItemNavigation.ViewModel) {
        DispatchQueue.main.async {
            self.router?.navigateToPlaceDetails(place: viewModel.place)
        }
    }
}
