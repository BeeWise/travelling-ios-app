//
//  SignUpViewController+DisplayLogic.swift
//  Travelling
//
//  Created by Dimitri Strauneanu on 06/10/2020.
//  Copyright (c) 2020 Travelling. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SignUpDisplayLogic: class {
    func displaySetupItems(viewModel: SignUpModels.SetupItems.ViewModel)
    
    func displayUpdateItem(viewModel: SignUpModels.UpdateItem.ViewModel)
    func displayValidationError(viewModel: SignUpModels.ValidateItem.ViewModel)
    
    func displayUpdateImageItem(viewModel: SignUpModels.UpdateImageItem.ViewModel)
    
    func displayActivateTextField(viewModel: SignUpModels.ActivateTextField.ViewModel)
    
    func displayEnableItem(viewModel: SignUpModels.EnableItem.ViewModel)
    func displayDisableItem(viewModel: SignUpModels.EnableItem.ViewModel)
    
    func displayPhotoLibraryAlert(viewModel: SignUpModels.PhotoLibraryAlert.ViewModel)
    func displayPhotoLibraryCameraAlert(viewModel: SignUpModels.PhotoLibraryCameraAlert.ViewModel)
    func displayPhotoLibraryRemovePhotoAlert(viewModel: SignUpModels.PhotoLibraryRemovePhotoAlert.ViewModel)
    func displayPhotoLibraryCameraRemovePhotoAlert(viewModel: SignUpModels.PhotoLibraryCameraRemovePhotoAlert.ViewModel)
    
    func displayCameraAlert(viewModel: SignUpModels.CameraAlert.ViewModel)
    func displayCameraRemovePhotoAlert(viewModel: SignUpModels.CameraRemovePhotoAlert.ViewModel)
    
    func displayNavigateToPhotoLibrary(viewModel: SignUpModels.SourceView.ViewModel)
    func displayNavigateToCamera(viewModel: SignUpModels.SourceView.ViewModel)
    
    func displayLoadingItem(viewModel: SignUpModels.LoadingItem.ViewModel)
    func displayNotLoadingItem(viewModel: SignUpModels.LoadingItem.ViewModel)
    
    func displayEnableUserInteraction()
    func displayDisableUserInteraction()
    
    func displayUserDetails(viewModel: SignUpModels.SignUpUser.ViewModel)
    func displayErrorDetails(viewModel: SignUpModels.SignUpError.ViewModel)
}

extension SignUpViewController: SignUpDisplayLogic {
    func displaySetupItems(viewModel: SignUpModels.SetupItems.ViewModel) {
        DispatchQueue.main.async {
            self.displayedItems = viewModel.displayedItems
            self.tableView?.reloadData()
        }
    }
    
    func displayUpdateItem(viewModel: SignUpModels.UpdateItem.ViewModel) {
        DispatchQueue.main.async {
            (self.displayedItemModel(type: viewModel.type) as? SignUpModels.DisplayedTextItem)?.text = viewModel.text
        }
    }
    
    func displayValidationError(viewModel: SignUpModels.ValidateItem.ViewModel) {
        DispatchQueue.main.async {
            (self.displayedItemModel(type: viewModel.type) as? SignUpModels.DisplayedTextItem)?.displayError = viewModel.displayError
            self.reloadItem(itemType: viewModel.type)
        }
    }
    
    func displayUpdateImageItem(viewModel: SignUpModels.UpdateImageItem.ViewModel) {
        DispatchQueue.main.async {
            (self.displayedItemModel(type: viewModel.type) as? SignUpModels.DisplayedImageItem)?.image = viewModel.image
            (self.displayedItemModel(type: viewModel.type) as? SignUpModels.DisplayedImageItem)?.contentMode = viewModel.contentMode
            self.reloadItem(itemType: viewModel.type)
        }
    }
    
    func displayActivateTextField(viewModel: SignUpModels.ActivateTextField.ViewModel) {
        DispatchQueue.main.async {
            if let value = self.textFields.first(where: { $0.1 == viewModel.type }) {
                value.0?.becomeFirstResponder()
            }
        }
    }
    
    func displayEnableItem(viewModel: SignUpModels.EnableItem.ViewModel) {
        DispatchQueue.main.async {
            (self.displayedItemModel(type: viewModel.type) as? SignUpModels.DisplayedButtonItem)?.isEnabled = true
            self.reloadItem(itemType: viewModel.type)
        }
    }
    
    func displayDisableItem(viewModel: SignUpModels.EnableItem.ViewModel) {
        DispatchQueue.main.async {
            (self.displayedItemModel(type: viewModel.type) as? SignUpModels.DisplayedButtonItem)?.isEnabled = false
            self.reloadItem(itemType: viewModel.type)
        }
    }
    
    private func reloadItem(itemType: SignUpModels.ItemType) {
        if let index = self.displayedItems.firstIndex(where: { $0.type == itemType }) {
            UIView.performWithoutAnimation {
                self.tableView?.reloadRows(at: [IndexPath(row: index, section: 0)], with: .none)
            }
        }
    }
    
    func displayPhotoLibraryAlert(viewModel: SignUpModels.PhotoLibraryAlert.ViewModel) {
        let photoLibraryAction = UIAlertAction(title: viewModel.photoLibraryTitle, style: .default) { action in
            self.interactor?.shouldNavigateToPhotoLibrary(request: SignUpModels.SourceView.Request(sourceView: viewModel.sourceView))
        }
        let cancelAction = UIAlertAction(title: viewModel.cancelTitle, style: .cancel, handler: nil)
        self.router?.navigateToActionSheet(actions: [photoLibraryAction, cancelAction], sourceView: viewModel.sourceView)
    }
    
    func displayPhotoLibraryCameraAlert(viewModel: SignUpModels.PhotoLibraryCameraAlert.ViewModel) {
        let photoLibraryAction = UIAlertAction(title: viewModel.photoLibraryTitle, style: .default) { action in
            self.interactor?.shouldNavigateToPhotoLibrary(request: SignUpModels.SourceView.Request(sourceView: viewModel.sourceView))
        }
        let cameraAction = UIAlertAction(title: viewModel.cameraTitle, style: .default) { action in
            self.interactor?.shouldNavigateToCamera(request: SignUpModels.SourceView.Request(sourceView: viewModel.sourceView))
        }
        let cancelAction = UIAlertAction(title: viewModel.cancelTitle, style: .cancel, handler: nil)
        self.router?.navigateToActionSheet(actions: [photoLibraryAction, cameraAction, cancelAction], sourceView: viewModel.sourceView)
    }
    
    func displayPhotoLibraryRemovePhotoAlert(viewModel: SignUpModels.PhotoLibraryRemovePhotoAlert.ViewModel) {
        let photoLibraryAction = UIAlertAction(title: viewModel.photoLibraryTitle, style: .default) { action in
            self.interactor?.shouldNavigateToPhotoLibrary(request: SignUpModels.SourceView.Request(sourceView: viewModel.sourceView))
        }
        let removePhotoAction = UIAlertAction(title: viewModel.removePhotoTitle, style: .default) { action in
            self.interactor?.shouldUpdateImageItem(request: SignUpModels.UpdateImageItem.Request(image: nil, type: SignUpModels.ItemType.photo))
        }
        let cancelAction = UIAlertAction(title: viewModel.cancelTitle, style: .cancel, handler: nil)
        self.router?.navigateToActionSheet(actions: [photoLibraryAction, removePhotoAction, cancelAction], sourceView: viewModel.sourceView)
    }
    
    func displayPhotoLibraryCameraRemovePhotoAlert(viewModel: SignUpModels.PhotoLibraryCameraRemovePhotoAlert.ViewModel) {
        let photoLibraryAction = UIAlertAction(title: viewModel.photoLibraryTitle, style: .default) { action in
            self.interactor?.shouldNavigateToPhotoLibrary(request: SignUpModels.SourceView.Request(sourceView: viewModel.sourceView))
        }
        let cameraAction = UIAlertAction(title: viewModel.cameraTitle, style: .default) { action in
            self.interactor?.shouldNavigateToCamera(request: SignUpModels.SourceView.Request(sourceView: viewModel.sourceView))
        }
        let removePhotoAction = UIAlertAction(title: viewModel.removePhotoTitle, style: .default) { action in
            self.interactor?.shouldUpdateImageItem(request: SignUpModels.UpdateImageItem.Request(image: nil, type: SignUpModels.ItemType.photo))
        }
        let cancelAction = UIAlertAction(title: viewModel.cancelTitle, style: .cancel, handler: nil)
        self.router?.navigateToActionSheet(actions: [photoLibraryAction, cameraAction, removePhotoAction, cancelAction], sourceView: viewModel.sourceView)
    }
    
    func displayCameraAlert(viewModel: SignUpModels.CameraAlert.ViewModel) {
        let cameraAction = UIAlertAction(title: viewModel.cameraTitle, style: .default) { action in
            self.interactor?.shouldNavigateToCamera(request: SignUpModels.SourceView.Request(sourceView: viewModel.sourceView))
        }
        let cancelAction = UIAlertAction(title: viewModel.cancelTitle, style: .cancel, handler: nil)
        self.router?.navigateToActionSheet(actions: [cameraAction, cancelAction], sourceView: viewModel.sourceView)
    }
    
    func displayCameraRemovePhotoAlert(viewModel: SignUpModels.CameraRemovePhotoAlert.ViewModel) {
        let cameraAction = UIAlertAction(title: viewModel.cameraTitle, style: .default) { action in
            self.interactor?.shouldNavigateToCamera(request: SignUpModels.SourceView.Request(sourceView: viewModel.sourceView))
        }
        let removePhotoAction = UIAlertAction(title: viewModel.removePhotoTitle, style: .default) { action in
            self.interactor?.shouldUpdateImageItem(request: SignUpModels.UpdateImageItem.Request(image: nil, type: SignUpModels.ItemType.photo))
        }
        let cancelAction = UIAlertAction(title: viewModel.cancelTitle, style: .cancel, handler: nil)
        self.router?.navigateToActionSheet(actions: [cameraAction, removePhotoAction, cancelAction], sourceView: viewModel.sourceView)
    }
    
    func displayNavigateToPhotoLibrary(viewModel: SignUpModels.SourceView.ViewModel) {
        self.router?.navigateToPhotoLibrary(sourceView: viewModel.sourceView)
    }
    
    func displayNavigateToCamera(viewModel: SignUpModels.SourceView.ViewModel) {
        self.router?.navigateToCamera(sourceView: viewModel.sourceView)
    }
    
    func displayLoadingItem(viewModel: SignUpModels.LoadingItem.ViewModel) {
        DispatchQueue.main.async {
            (self.displayedItemModel(type: viewModel.type) as? SignUpModels.DisplayedButtonItem)?.isLoading = true
            self.reloadItem(itemType: viewModel.type)
        }
    }
    
    func displayNotLoadingItem(viewModel: SignUpModels.LoadingItem.ViewModel) {
        DispatchQueue.main.async {
            (self.displayedItemModel(type: viewModel.type) as? SignUpModels.DisplayedButtonItem)?.isLoading = false
            self.reloadItem(itemType: viewModel.type)
        }
    }
    
    func displayEnableUserInteraction() {
        DispatchQueue.main.async {
            self.tableView?.isUserInteractionEnabled = true
        }
    }
    
    func displayDisableUserInteraction() {
        DispatchQueue.main.async {
            self.tableView?.isUserInteractionEnabled = false
        }
    }
    
    func displayUserDetails(viewModel: SignUpModels.SignUpUser.ViewModel) {
        DispatchQueue.main.async {
            self.delegate?.signUpViewController(self, didSignUpUser: viewModel.user)
        }
    }
    
    func displayErrorDetails(viewModel: SignUpModels.SignUpError.ViewModel) {
        DispatchQueue.main.async {
            let okAction = UIAlertAction(title: viewModel.okTitle, style: UIAlertAction.Style.cancel, handler: nil)
            self.router?.navigateToAlert(title: nil, message: viewModel.message, actions: [okAction])
        }
    }
    
    func displayedItemModel(type: SignUpModels.ItemType) -> Any? {
        return self.displayedItems.first(where: { $0.type == type })?.model
    }
}
