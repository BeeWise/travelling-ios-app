//
//  SignUpWorker.swift
//  Travelling
//
//  Created by Dimitri Strauneanu on 06/10/2020.
//  Copyright (c) 2020 Travelling. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SignUpWorkerDelegate: class {
    func successDidSignUpUser(user: User)
    func failureDidSignUpUser(details: SignUpModels.UserDetails, error: OperationError)
}

class SignUpWorker {
    weak var delegate: SignUpWorkerDelegate?
    
    var authenticationTask: AuthenticationTaskProtocol = TaskConfigurator.shared.authenticationTask()
    
    init(delegate: SignUpWorkerDelegate?) {
        self.delegate = delegate
    }
    
    func signUpUser(details: SignUpModels.UserDetails) {
        DispatchQueue.global().async {
            let model = AuthenticationTaskModels.SignUpUser.Request(
                email: details.email,
                username: details.username,
                password: details.password,
                firstName: details.firstName,
                lastName: details.lastName,
                description: details.description,
                photoBase64: details.photo?.withCorrectOrientation()?.jpegData(compressionQuality: 1)?.base64EncodedString()
            )
            self.authenticationTask.signUpUser(model: model) { result in
                switch result {
                    case .success(let response): self.delegate?.successDidSignUpUser(user: response.user); break
                    case .failure(let error): self.delegate?.failureDidSignUpUser(details: details, error: error); break
                }
            }
        }
    }
}
