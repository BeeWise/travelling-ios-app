//
//  SignUpInteractor.swift
//  Travelling
//
//  Created by Dimitri Strauneanu on 06/10/2020.
//  Copyright (c) 2020 Travelling. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SignUpBusinessLogic {
    func shouldSetupItems()
    
    func shouldUpdateItem(request: SignUpModels.UpdateItem.Request)
    func shouldValidateItem(request: SignUpModels.ValidateItem.Request)
    func shouldSelectItem(request: SignUpModels.ItemSelection.Request)
    
    func shouldUpdateImageItem(request: SignUpModels.UpdateImageItem.Request)
    
    func shouldActivateTextField(request: SignUpModels.ActivateTextField.Request)
    
    func shouldNavigateToPhotoLibrary(request: SignUpModels.SourceView.Request)
    func shouldNavigateToCamera(request: SignUpModels.SourceView.Request)
}

class SignUpInteractor: SignUpBusinessLogic {
    var presenter: SignUpPresentationLogic?
    var worker: SignUpWorker?
    
    var userDetails: SignUpModels.UserDetails
    var photoLibraryHandler: PhotoLibraryHandler
    
    init() {
        self.userDetails = SignUpModels.UserDetails()
        self.photoLibraryHandler = PhotoLibraryHandler()
        self.worker = SignUpWorker(delegate: self)
    }
    
    func shouldSetupItems() {
        self.presenter?.presentSetupItems()
    }
    
    func shouldUpdateItem(request: SignUpModels.UpdateItem.Request) {
        let text = request.text
        switch request.type {
            case .email: self.userDetails.email = text; break
            case .username: self.userDetails.username = text; break
            case .password: self.userDetails.password = text; break
            case .firstName: self.userDetails.firstName = text; break
            case .lastName: self.userDetails.lastName = text; break
            case .description: self.userDetails.description = text; break
            default: break
        }
        
        self.presenter?.presentUpdateItem(response: SignUpModels.UpdateItem.Response(text: text, type: request.type))
        self.validateAllItems()
    }
    
    func shouldUpdateImageItem(request: SignUpModels.UpdateImageItem.Request) {
        switch request.type {
            case .photo: self.userDetails.photo = request.image; break
            default: break
        }
        
        if let image = request.image {
            self.presenter?.presentUpdateImageItem(response: SignUpModels.UpdateImageItem.Response(image: image, type: request.type))
        } else {
            self.presenter?.presentUpdatePlaceholderImageItem(response: SignUpModels.UpdatePlaceholderImageItem.Response(type: request.type))
        }
    }
    
    func shouldSelectItem(request: SignUpModels.ItemSelection.Request) {
        switch request.itemType {
            case .photo: self.shouldSelectProfilePhoto(sourceView: request.sourceView); break
            case .signUp: self.shouldSignUpUser(); break
            default: break
        }
    }
    
    func shouldActivateTextField(request: SignUpModels.ActivateTextField.Request) {
        self.presenter?.presentActivateTextField(response: SignUpModels.ActivateTextField.Response(type: request.type))
    }
    
    private func shouldSelectProfilePhoto(sourceView: UIView) {
        let isPhotoLibraryAvailable = self.photoLibraryHandler.isPhotoLibraryAvailable
        let isCameraAvailable = self.photoLibraryHandler.isCameraAvailable
        let isProfilePhotoAvailable = self.userDetails.photo != nil
        
        let response = SignUpModels.SourceView.Response(sourceView: sourceView)
        
        if isPhotoLibraryAvailable && isCameraAvailable && isProfilePhotoAvailable {
            self.presenter?.presentPhotoLibraryCameraRemovePhotoAlert(response: response)
        } else if isPhotoLibraryAvailable && !isCameraAvailable && isProfilePhotoAvailable {
            self.presenter?.presentPhotoLibraryRemovePhotoAlert(response: response)
        } else if isPhotoLibraryAvailable && isCameraAvailable && !isProfilePhotoAvailable {
            self.presenter?.presentPhotoLibraryCameraAlert(response: response)
        } else if isPhotoLibraryAvailable && !isCameraAvailable && !isProfilePhotoAvailable {
            self.presenter?.presentPhotoLibraryAlert(response: response)
        } else if !isPhotoLibraryAvailable && isCameraAvailable && isProfilePhotoAvailable {
            self.presenter?.presentCameraRemovePhotoAlert(response: response)
        } else if !isPhotoLibraryAvailable && isCameraAvailable && !isProfilePhotoAvailable {
            self.presenter?.presentCameraAlert(response: response)
        }
    }
    
    func shouldNavigateToPhotoLibrary(request: SignUpModels.SourceView.Request) {
        self.presenter?.presentNavigateToPhotoLibrary(response: SignUpModels.SourceView.Response(sourceView: request.sourceView))
    }
    
    func shouldNavigateToCamera(request: SignUpModels.SourceView.Request) {
        self.presenter?.presentNavigateToCamera(response: SignUpModels.SourceView.Response(sourceView: request.sourceView))
    }
    
    private func shouldSignUpUser() {
        self.presenter?.presentDisableUserInteraction()
        self.presenter?.presentDisableItem(response: SignUpModels.EnableItem.Response(type: SignUpModels.ItemType.signUp))
        self.presenter?.presentLoadingItem(response: SignUpModels.LoadingItem.Response(type: SignUpModels.ItemType.signUp))
        self.worker?.signUpUser(details: self.userDetails)
    }
}

extension SignUpInteractor: SignUpWorkerDelegate {
    func successDidSignUpUser(user: User) {
        self.presenter?.presentNotLoadingItem(response: SignUpModels.LoadingItem.Response(type: SignUpModels.ItemType.signUp))
        self.presenter?.presentEnableItem(response: SignUpModels.EnableItem.Response(type: SignUpModels.ItemType.signUp))
        self.presenter?.presentEnableUserInteraction()
        self.presenter?.presentUserDetails(response: SignUpModels.SignUpUser.Response(user: user))
    }
    
    func failureDidSignUpUser(details: SignUpModels.UserDetails, error: OperationError) {
        self.presenter?.presentNotLoadingItem(response: SignUpModels.LoadingItem.Response(type: SignUpModels.ItemType.signUp))
        self.presenter?.presentEnableItem(response: SignUpModels.EnableItem.Response(type: SignUpModels.ItemType.signUp))
        self.presenter?.presentEnableUserInteraction()
        self.presenter?.presentErrorDetails(response: SignUpModels.SignUpError.Response(error: error))
    }
}
