//
//  SignUpRouter.swift
//  Travelling
//
//  Created by Dimitri Strauneanu on 06/10/2020.
//  Copyright (c) 2020 Travelling. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SignUpRoutingLogic {
    func popViewController()
    func dismissViewController()
    
    func navigateToAlert(title: String?, message: String?, actions: [UIAlertAction])
    func navigateToActionSheet(actions: [UIAlertAction], sourceView: UIView)
    func navigateToPhotoLibrary(sourceView: UIView)
    func navigateToCamera(sourceView: UIView)
}

class SignUpRouter: SignUpRoutingLogic {
    weak var viewController: SignUpViewController?
    
    func popViewController() {
        self.viewController?.navigationController?.popViewController(animated: true)
    }
    
    func dismissViewController() {
        self.viewController?.dismiss(animated: true, completion: nil)
    }
    
    func navigateToAlert(title: String?, message: String?, actions: [UIAlertAction]) {
        let alertController = UIAlertController(title: title, message: message, preferredStyle: UIAlertController.Style.alert)
        actions.forEach({ alertController.addAction($0) })
        self.viewController?.present(alertController, animated: true, completion: nil)
    }
    
    func navigateToActionSheet(actions: [UIAlertAction], sourceView: UIView) {
        let alertController = UIAlertController(title: nil, message: nil, preferredStyle: UIAlertController.Style.actionSheet)
        actions.forEach({ alertController.addAction($0) })
        alertController.popoverPresentationController?.sourceView = sourceView
        alertController.popoverPresentationController?.sourceRect = sourceView.bounds
        alertController.popoverPresentationController?.permittedArrowDirections = .up
        self.viewController?.present(alertController, animated: true, completion: nil)
    }
    
    func navigateToPhotoLibrary(sourceView: UIView) {
        let imagePickerController = self.imagePickerController(sourceView: sourceView)
        imagePickerController.sourceType = .photoLibrary
        self.viewController?.present(imagePickerController, animated: true, completion: nil)
    }
    
    func navigateToCamera(sourceView: UIView) {
        let imagePickerController = self.imagePickerController(sourceView: sourceView)
        imagePickerController.sourceType = .camera
        imagePickerController.cameraDevice = .front
        self.viewController?.present(imagePickerController, animated: true, completion: nil)
    }
    
    private func imagePickerController(sourceView: UIView) -> UIImagePickerController {
        let imagePickerController = UIImagePickerController()
        imagePickerController.navigationBar.isTranslucent = SignUpStyle.shared.navigationBarModel.isTranslucent
        imagePickerController.navigationBar.tintColor = SignUpStyle.shared.navigationBarModel.tintColor
        imagePickerController.navigationBar.barTintColor = SignUpStyle.shared.navigationBarModel.barTintColor
        imagePickerController.navigationBar.titleTextAttributes = SignUpStyle.shared.navigationBarModel.titleAttributes()
        imagePickerController.modalPresentationStyle = .popover
        imagePickerController.popoverPresentationController?.sourceView = sourceView
        imagePickerController.popoverPresentationController?.sourceRect = sourceView.bounds
        imagePickerController.popoverPresentationController?.permittedArrowDirections = .up
        imagePickerController.delegate = self.viewController
        return imagePickerController
    }
}
