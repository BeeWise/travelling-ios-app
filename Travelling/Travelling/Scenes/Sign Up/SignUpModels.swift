//
//  SignUpModels.swift
//  Travelling
//
//  Created by Dimitri Strauneanu on 06/10/2020.
//  Copyright (c) 2020 Travelling. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

enum SignUpModels {
    class Item {
        var type: ItemType
        var model: Any?
        
        init(type: ItemType, model: Any?) {
            self.type = type
            self.model = model
        }
    }
    
    class DisplayedButtonItem {
        var title: NSAttributedString?
        var isEnabled: Bool = false
        var isLoading: Bool = false
    }
    
    class DisplayedTextItem {
        var title: String = ""
        var text: String = ""
        var placeholder: String = ""
        var keyboardType: UIKeyboardType = .default
        var autocapitalizationType: UITextAutocapitalizationType = .none
        var autocorrectionType: UITextAutocorrectionType = .no
        var isSecureText: Bool = false
        var returnKeyType: UIReturnKeyType = .default
        var maximumLength: Int = 1024
        
        var errorText: String = ""
        var displayError: Bool = false
    }
    
    class DisplayedImageItem {
        var title: String = ""
        var image: UIImage? = nil
        var contentMode: UIView.ContentMode = .scaleAspectFill
    }
    
    enum ItemType: CaseIterable {
        case photo
        case email
        case username
        case password
        case firstName
        case lastName
        case description
        case signUp
    }
    
    struct UserDetails {
        var email: String = ""
        var username: String = ""
        var password: String = ""
        var firstName: String = ""
        var lastName: String = ""
        
        var description: String?
        var photo: UIImage?
    }
    
    enum SetupItems {
        struct ViewModel {
            var displayedItems: [Item]
        }
    }
    
    enum UpdateItem {
        struct Request {
            let text: String
            let type: ItemType
        }
        
        struct Response {
            let text: String
            let type: ItemType
        }
        
        struct ViewModel {
            let text: String
            let type: ItemType
        }
    }
    
    enum ValidateItem {
        struct Request {
            let type: ItemType
        }
        
        struct Response {
            let type: ItemType
            let displayError: Bool
        }
        
        struct ViewModel {
            let type: ItemType
            let displayError: Bool
        }
    }
    
    enum UpdateImageItem {
        struct Request {
            let image: UIImage?
            let type: ItemType
        }
        
        struct Response {
            let image: UIImage?
            let type: ItemType
        }
        
        struct ViewModel {
            let image: UIImage?
            let contentMode: UIView.ContentMode
            let type: ItemType
        }
    }
    
    enum UpdatePlaceholderImageItem {
        struct Response {
            let type: ItemType
        }
    }
    
    enum ActivateTextField {
        struct Request {
            let type: ItemType
        }
        
        struct Response {
            let type: ItemType
        }
        
        struct ViewModel {
            let type: ItemType
        }
    }
    
    enum EnableItem {
        struct Request {
            let type: ItemType
        }
        
        struct Response {
            let type: ItemType
        }
        
        struct ViewModel {
            let type: ItemType
        }
    }
    
    enum SourceView {
        struct Request {
            let sourceView: UIView
        }
        
        struct Response {
            let sourceView: UIView
        }
        
        struct ViewModel {
            let sourceView: UIView
        }
    }
    
    enum PhotoLibraryAlert {
        struct ViewModel {
            let photoLibraryTitle: String
            let cancelTitle: String
            
            let sourceView: UIView
        }
    }
    
    enum PhotoLibraryCameraAlert {
        struct ViewModel {
            let photoLibraryTitle: String
            let cameraTitle: String
            let cancelTitle: String
            
            let sourceView: UIView
        }
    }
    
    enum PhotoLibraryRemovePhotoAlert {
        struct ViewModel {
            let photoLibraryTitle: String
            let removePhotoTitle: String
            let cancelTitle: String
            
            let sourceView: UIView
        }
    }
    
    enum PhotoLibraryCameraRemovePhotoAlert {
        struct ViewModel {
            let photoLibraryTitle: String
            let cameraTitle: String
            let removePhotoTitle: String
            let cancelTitle: String
            
            let sourceView: UIView
        }
    }
    
    enum CameraAlert {
        struct ViewModel {
            let cameraTitle: String
            let cancelTitle: String
            
            let sourceView: UIView
        }
    }
    
    enum CameraRemovePhotoAlert {
        struct ViewModel {
            let cameraTitle: String
            let removePhotoTitle: String
            let cancelTitle: String
            
            let sourceView: UIView
        }
    }
    
    enum LoadingItem {
        struct Response {
            let type: ItemType
        }
        
        struct ViewModel {
            let type: ItemType
        }
    }
    
    enum SignUpUser {
        struct Response {
            let user: User
        }
        
        struct ViewModel {
            let user: User
        }
    }
    
    enum SignUpError {
        struct Response {
            let error: OperationError
        }
        
        struct ViewModel {
            let message: String
            let okTitle: String
        }
    }
    
    enum ItemSelection {
        struct Request {
            let itemType: ItemType
            let sourceView: UIView
        }
    }
}
