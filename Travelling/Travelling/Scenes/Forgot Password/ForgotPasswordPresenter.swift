//
//  ForgotPasswordPresenter.swift
//  Travelling
//
//  Created by Dimitri Strauneanu on 05/10/2020.
//  Copyright (c) 2020 Travelling. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ForgotPasswordPresentationLogic {
    func presentSetupItems()
    
    func presentUpdateItem(response: ForgotPasswordModels.UpdateItem.Response)
    func presentValidationError(response: ForgotPasswordModels.ValidateItem.Response)
    
    func presentEnableItem(response: ForgotPasswordModels.EnableItem.Response)
    func presentDisableItem(response: ForgotPasswordModels.EnableItem.Response)
    
    func presentLoadingItem(response: ForgotPasswordModels.LoadingItem.Response)
    func presentNotLoadingItem(response: ForgotPasswordModels.LoadingItem.Response)
    
    func presentEnableUserInteraction()
    func presentDisableUserInteraction()
    
    func presentConfirmationAlert(response: ForgotPasswordModels.Confirmation.Response)
    func presentConfirmationEmailAlert(response: ForgotPasswordModels.ConfirmationEmail.Response)
    func presentErrorAlert(response: ForgotPasswordModels.ForgotPasswordError.Response)
    
    func presentOpenMailApplication(response: ForgotPasswordModels.OpenApplication.Response)
}

class ForgotPasswordPresenter: ForgotPasswordPresentationLogic {
    weak var displayer: ForgotPasswordDisplayLogic?
    
    func presentSetupItems() {
        let viewModel = ForgotPasswordModels.SetupItems.ViewModel(displayedItems: self.items())
        self.displayer?.displaySetupItems(viewModel: viewModel)
    }
    
    private func items() -> [ForgotPasswordModels.Item] {
        return [self.emailItem(), self.resetLinkItem()]
    }
    
    private func emailItem() -> ForgotPasswordModels.Item {
        let model = ForgotPasswordModels.DisplayedTextItem()
        model.title = ForgotPasswordLocalization.shared.emailTitle
        model.keyboardType = .emailAddress
        model.autocapitalizationType = .none
        model.autocorrectionType = .no
        model.returnKeyType = .done
        model.errorText = ForgotPasswordLocalization.shared.emailErrorText
        return ForgotPasswordModels.Item(type: ForgotPasswordModels.ItemType.email, model: model)
    }
    
    private func resetLinkItem() -> ForgotPasswordModels.Item {
        let model = ForgotPasswordModels.DisplayedButtonItem()
        model.title = ForgotPasswordLocalization.shared.sendResetLinkButtonTitle.attributed(attributes: ForgotPasswordStyle.shared.buttonCellModel.textAttributes())
        model.isEnabled = false
        return ForgotPasswordModels.Item(type: ForgotPasswordModels.ItemType.resetLink, model: model)
    }
    
    func presentUpdateItem(response: ForgotPasswordModels.UpdateItem.Response) {
        let viewModel = ForgotPasswordModels.UpdateItem.ViewModel(text: response.text, type: response.type)
        self.displayer?.displayUpdateItem(viewModel: viewModel)
    }
    
    func presentValidationError(response: ForgotPasswordModels.ValidateItem.Response) {
        let viewModel = ForgotPasswordModels.ValidateItem.ViewModel(type: response.type, displayError: response.displayError)
        self.displayer?.displayValidationError(viewModel: viewModel)
    }
    
    func presentEnableItem(response: ForgotPasswordModels.EnableItem.Response) {
        self.displayer?.displayEnableItem(viewModel: ForgotPasswordModels.EnableItem.ViewModel(type: response.type))
    }
    
    func presentDisableItem(response: ForgotPasswordModels.EnableItem.Response) {
        self.displayer?.displayDisableItem(viewModel: ForgotPasswordModels.EnableItem.ViewModel(type: response.type))
    }
    
    func presentLoadingItem(response: ForgotPasswordModels.LoadingItem.Response) {
        self.displayer?.displayLoadingItem(viewModel: ForgotPasswordModels.LoadingItem.ViewModel(type: response.type))
    }
    
    func presentNotLoadingItem(response: ForgotPasswordModels.LoadingItem.Response) {
        self.displayer?.displayNotLoadingItem(viewModel: ForgotPasswordModels.LoadingItem.ViewModel(type: response.type))
    }
    
    func presentEnableUserInteraction() {
        self.displayer?.displayEnableUserInteraction()
    }
    
    func presentDisableUserInteraction() {
        self.displayer?.displayDisableUserInteraction()
    }
    
    func presentConfirmationAlert(response: ForgotPasswordModels.Confirmation.Response) {
        let message = ForgotPasswordLocalization.shared.confirmationMessage(email: response.email)
        let okTitle = ForgotPasswordLocalization.shared.okTitle
        let viewModel = ForgotPasswordModels.Confirmation.ViewModel(message: message, okTitle: okTitle)
        self.displayer?.displayConfirmationAlert(viewModel: viewModel)
    }
    
    func presentConfirmationEmailAlert(response: ForgotPasswordModels.ConfirmationEmail.Response) {
        let message = ForgotPasswordLocalization.shared.confirmationMessage(email: response.email)
        let okTitle = ForgotPasswordLocalization.shared.okTitle
        let goToMailTitle = ForgotPasswordLocalization.shared.goToMailTitle
        let viewModel = ForgotPasswordModels.ConfirmationEmail.ViewModel(message: message, okTitle: okTitle, goToMailTitle: goToMailTitle)
        self.displayer?.displayConfirmationEmailAlert(viewModel: viewModel)
    }
    
    func presentErrorAlert(response: ForgotPasswordModels.ForgotPasswordError.Response) {
        let message = ForgotPasswordLocalization.shared.errorMessage
        let okTitle = ForgotPasswordLocalization.shared.okTitle
        let viewModel = ForgotPasswordModels.ForgotPasswordError.ViewModel(message: message, okTitle: okTitle)
        self.displayer?.displayErrorAlert(viewModel: viewModel)
    }
        
    func presentOpenMailApplication(response: ForgotPasswordModels.OpenApplication.Response) {
        self.displayer?.displayOpenMailApplication(viewModel: ForgotPasswordModels.OpenApplication.ViewModel(url: response.url))
    }
}
