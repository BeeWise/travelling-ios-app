//
//  ForgotPasswordInteractor.swift
//  Travelling
//
//  Created by Dimitri Strauneanu on 05/10/2020.
//  Copyright (c) 2020 Travelling. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ForgotPasswordBusinessLogic {
    func shouldSetupItems()
    
    func shouldUpdateItem(request: ForgotPasswordModels.UpdateItem.Request)
    func shouldValidateItem(request: ForgotPasswordModels.ValidateItem.Request)
    func shouldSelectItem(request: ForgotPasswordModels.ItemSelection.Request)
    
    func shouldOpenMailApplication()
}

class ForgotPasswordInteractor: ForgotPasswordBusinessLogic {
    var presenter: ForgotPasswordPresentationLogic?
    var worker: ForgotPasswordWorker?
    
    var email: String = ""
    var urlOpener: URLOpenable = UIApplication.shared
    
    init() {
        self.worker = ForgotPasswordWorker(delegate: self)
    }
    
    func shouldSetupItems() {
        self.presenter?.presentSetupItems()
    }
    
    func shouldUpdateItem(request: ForgotPasswordModels.UpdateItem.Request) {
        let text = request.text
        switch request.type {
            case .email: self.email = text; break
            default: break
        }
        
        self.presenter?.presentUpdateItem(response: ForgotPasswordModels.UpdateItem.Response(text: text, type: request.type))
        self.validateAllItems()
    }
    
    func shouldSelectItem(request: ForgotPasswordModels.ItemSelection.Request) {
        switch request.type {
            case .resetLink: self.shouldSendResetLink(); break
            default: break
        }
    }
    
    private func shouldSendResetLink() {
        self.presenter?.presentDisableUserInteraction()
        self.presenter?.presentDisableItem(response: ForgotPasswordModels.EnableItem.Response(type: ForgotPasswordModels.ItemType.resetLink))
        self.presenter?.presentLoadingItem(response: ForgotPasswordModels.LoadingItem.Response(type: ForgotPasswordModels.ItemType.resetLink))
        self.worker?.sendResetLink(email: self.email)
    }
    
    private func shouldPresentConfirmationAlert(email: String) {
        DispatchQueue.main.async {
            if let url = URL(string: "message://"), self.urlOpener.canOpenURL(url) {
                self.presenter?.presentConfirmationEmailAlert(response: ForgotPasswordModels.ConfirmationEmail.Response(email: email))
            } else {
                self.presenter?.presentConfirmationAlert(response: ForgotPasswordModels.Confirmation.Response(email: email))
            }
        }
    }
    
    func shouldOpenMailApplication() {
        if let url = URL(string: "message://") {
            self.presenter?.presentOpenMailApplication(response: ForgotPasswordModels.OpenApplication.Response(url: url))
        }
    }
}

extension ForgotPasswordInteractor: ForgotPasswordWorkerDelegate {
    func successDidSendResetLink(email: String) {
        self.presenter?.presentNotLoadingItem(response: ForgotPasswordModels.LoadingItem.Response(type: ForgotPasswordModels.ItemType.resetLink))
        self.presenter?.presentEnableItem(response: ForgotPasswordModels.EnableItem.Response(type: ForgotPasswordModels.ItemType.resetLink))
        self.presenter?.presentEnableUserInteraction()
        self.shouldPresentConfirmationAlert(email: email)
    }
    
    func failureDidSendResetLink(email: String, error: OperationError) {
        self.presenter?.presentNotLoadingItem(response: ForgotPasswordModels.LoadingItem.Response(type: ForgotPasswordModels.ItemType.resetLink))
        self.presenter?.presentEnableItem(response: ForgotPasswordModels.EnableItem.Response(type: ForgotPasswordModels.ItemType.resetLink))
        self.presenter?.presentEnableUserInteraction()
        self.presenter?.presentErrorAlert(response: ForgotPasswordModels.ForgotPasswordError.Response(error: error))
    }
}
