//
//  ForgotPasswordViewController+DisplayLogic.swift
//  Travelling
//
//  Created by Dimitri Strauneanu on 05/10/2020.
//  Copyright (c) 2020 Travelling. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ForgotPasswordDisplayLogic: class {
    func displaySetupItems(viewModel: ForgotPasswordModels.SetupItems.ViewModel)
    
    func displayUpdateItem(viewModel: ForgotPasswordModels.UpdateItem.ViewModel)
    func displayValidationError(viewModel: ForgotPasswordModels.ValidateItem.ViewModel)
    
    func displayEnableItem(viewModel: ForgotPasswordModels.EnableItem.ViewModel)
    func displayDisableItem(viewModel: ForgotPasswordModels.EnableItem.ViewModel)
    
    func displayLoadingItem(viewModel: ForgotPasswordModels.LoadingItem.ViewModel)
    func displayNotLoadingItem(viewModel: ForgotPasswordModels.LoadingItem.ViewModel)
    
    func displayEnableUserInteraction()
    func displayDisableUserInteraction()
    
    func displayConfirmationAlert(viewModel: ForgotPasswordModels.Confirmation.ViewModel)
    func displayConfirmationEmailAlert(viewModel: ForgotPasswordModels.ConfirmationEmail.ViewModel)
    func displayErrorAlert(viewModel: ForgotPasswordModels.ForgotPasswordError.ViewModel)
    
    func displayOpenMailApplication(viewModel: ForgotPasswordModels.OpenApplication.ViewModel)
}

extension ForgotPasswordViewController: ForgotPasswordDisplayLogic {
    func displaySetupItems(viewModel: ForgotPasswordModels.SetupItems.ViewModel) {
        DispatchQueue.main.async {
            self.displayedItems = viewModel.displayedItems
            self.tableView?.reloadData()
        }
    }
    
    func displayUpdateItem(viewModel: ForgotPasswordModels.UpdateItem.ViewModel) {
        DispatchQueue.main.async {
            (self.displayedItemModel(type: viewModel.type) as? ForgotPasswordModels.DisplayedTextItem)?.text = viewModel.text
        }
    }
    
    func displayValidationError(viewModel: ForgotPasswordModels.ValidateItem.ViewModel) {
        DispatchQueue.main.async {
            (self.displayedItemModel(type: viewModel.type) as? ForgotPasswordModels.DisplayedTextItem)?.displayError = viewModel.displayError
            self.reloadItem(itemType: viewModel.type)
        }
    }
    
    func displayEnableItem(viewModel: ForgotPasswordModels.EnableItem.ViewModel) {
        DispatchQueue.main.async {
            (self.displayedItemModel(type: viewModel.type) as? ForgotPasswordModels.DisplayedButtonItem)?.isEnabled = true
            self.reloadItem(itemType: viewModel.type)
        }
    }
    
    func displayDisableItem(viewModel: ForgotPasswordModels.EnableItem.ViewModel) {
        DispatchQueue.main.async {
            (self.displayedItemModel(type: viewModel.type) as? ForgotPasswordModels.DisplayedButtonItem)?.isEnabled = false
            self.reloadItem(itemType: viewModel.type)
        }
    }
    
    private func reloadItem(itemType: ForgotPasswordModels.ItemType) {
        if let index = self.displayedItems.firstIndex(where: { $0.type == itemType }) {
            self.tableView?.reloadRowsWithoutAnimation(at: [IndexPath(row: index, section: 0)])
        }
    }
    
    func displayLoadingItem(viewModel: ForgotPasswordModels.LoadingItem.ViewModel) {
        DispatchQueue.main.async {
            (self.displayedItemModel(type: viewModel.type) as? ForgotPasswordModels.DisplayedButtonItem)?.isLoading = true
            self.reloadItem(itemType: viewModel.type)
        }
    }
    
    func displayNotLoadingItem(viewModel: ForgotPasswordModels.LoadingItem.ViewModel) {
        DispatchQueue.main.async {
            (self.displayedItemModel(type: viewModel.type) as? ForgotPasswordModels.DisplayedButtonItem)?.isLoading = false
            self.reloadItem(itemType: viewModel.type)
        }
    }
    
    func displayEnableUserInteraction() {
        DispatchQueue.main.async {
            self.tableView?.isUserInteractionEnabled = true
        }
    }
    
    func displayDisableUserInteraction() {
        DispatchQueue.main.async {
            self.tableView?.isUserInteractionEnabled = false
        }
    }
    
    func displayConfirmationAlert(viewModel: ForgotPasswordModels.Confirmation.ViewModel) {
        DispatchQueue.main.async {
            let okAction = UIAlertAction(title: viewModel.okTitle, style: UIAlertAction.Style.default, handler: { _ in self.router?.popViewController() })
            self.router?.navigateToAlert(title: nil, message: viewModel.message, actions: [okAction])
        }
    }
    
    func displayConfirmationEmailAlert(viewModel: ForgotPasswordModels.ConfirmationEmail.ViewModel) {
        DispatchQueue.main.async {
            let okAction = UIAlertAction(title: viewModel.okTitle, style: UIAlertAction.Style.default, handler: { _ in self.router?.popViewController() })
            let goToMailAction = UIAlertAction(title: viewModel.goToMailTitle, style: UIAlertAction.Style.default, handler: { _ in
                self.interactor?.shouldOpenMailApplication()
                self.router?.popViewController()
            })
            self.router?.navigateToAlert(title: nil, message: viewModel.message, actions: [okAction, goToMailAction])
        }
    }
    
    func displayErrorAlert(viewModel: ForgotPasswordModels.ForgotPasswordError.ViewModel) {
        DispatchQueue.main.async {
            let okAction = UIAlertAction(title: viewModel.okTitle, style: .cancel, handler: nil)
            self.router?.navigateToAlert(title: nil, message: viewModel.message, actions: [okAction])
        }
    }
    
    func displayOpenMailApplication(viewModel: ForgotPasswordModels.OpenApplication.ViewModel) {
        DispatchQueue.main.async {
            self.router?.navigateToApplication(url: viewModel.url)
        }
    }
    
    func displayedItemModel(type: ForgotPasswordModels.ItemType) -> Any? {
        return self.displayedItems.first(where: { $0.type == type })?.model
    }
}
